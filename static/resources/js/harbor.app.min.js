/*
    Copyright (c) 2016 VMware, Inc. All Rights Reserved.
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
        
        http://www.apache.org/licenses/LICENSE-2.0
        
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/
(function() {'use strict';angular.module('harbor.layout.header', ['harbor.services.user','harbor.services.i18n']);})();(function() {'use strict';angular.module('harbor.layout.header').controller('HeaderController', HeaderController);HeaderController.$inject = ['$scope', '$window', 'getParameterByName', '$location', 'currentUser'];function HeaderController($scope, $window, getParameterByName, $location, currentUser) {var vm = this;vm.user = currentUser.get();if(location.pathname === '/dashboard') {vm.defaultUrl = '/dashboard';}else{vm.defaultUrl = '/';}$scope.$watch('vm.user', function(current) {if(current) {vm.defaultUrl = '/dashboard';}});if($window.location.search) {vm.searchInput = getParameterByName('q', $window.location.search);console.log('vm.searchInput at header:' + vm.searchInput);}}})();(function() {'use strict';angular.module('harbor.layout.footer', []);})();(function() {'use strict';angular.module('harbor.layout.footer').controller('FooterController', FooterController);function FooterController() {var vm = this;}})();(function() {'use strict';angular.module('harbor.layout.navigation', []);})();(function() {'use strict';angular.module('harbor.layout.navigation').directive('navigationHeader', navigationHeader);NavigationHeaderController.$inject = ['$window', '$scope', 'currentUser', '$timeout'];function NavigationHeaderController($window, $scope, currentUser, $timeout) {var vm = this;vm.url = $window.location.pathname;}function navigationHeader() {var directive = {restrict: 'E',templateUrl: '/navigation_header?timestamp=' + new Date().getTime(),link: link,scope: true,controller: NavigationHeaderController,controllerAs: 'vm',bindToController: true};return directive; function link(scope, element, attrs, ctrl) { var visited = ctrl.url;console.log('visited:' + visited);if (visited !== '' && visited !== '/') { element.find('a[href*="' + visited + '"]').addClass('active'); }element.find('a').on('click', click);function click(event) {element.find('a').removeClass('active');$(event.target).not('span').addClass('active');} } }})();(function() {'use strict';angular.module('harbor.layout.navigation').directive('navigationDetails', navigationDetails);NavigationDetailsController.$inject = ['$window', '$location', '$scope', 'getParameterByName'];function NavigationDetailsController($window, $location, $scope, getParameterByName) {var vm = this; vm.projectId = getParameterByName('project_id', $location.absUrl());$scope.$on('$locationChangeSuccess', function() {vm.projectId = getParameterByName('project_id', $location.absUrl());}); vm.path = $location.path();}function navigationDetails() {var directive = {restrict: 'E',templateUrl: '/navigation_detail?timestamp=' + new Date().getTime(),link: link,scope: {'target': '='},replace: true,controller: NavigationDetailsController,controllerAs: 'vm',bindToController: true};return directive;function link(scope, element, attrs, ctrl) { var visited = ctrl.path.substring(1);if(visited.indexOf('?') >= 0) {visited = ctrl.url.substring(1, ctrl.url.indexOf('?'));}if(visited) {element.find('a[tag="' + visited + '"]').addClass('active');}else{element.find('a:first').addClass('active');}ctrl.target = visited;element.find('a').on('click', click);function click(event) {element.find('a').removeClass('active');$(event.target).addClass('active');ctrl.target = $(this).attr('tag');scope.$apply();} } }})();(function() {'use strict';angular.module('harbor.layout.navigation').directive('navigationAdminOptions', navigationAdminOptions);NavigationAdminOptions.$inject = ['$location'];function NavigationAdminOptions($location) {var vm = this;vm.path = $location.path();}function navigationAdminOptions() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/layout/navigation/navigation-admin-options.directive.html','scope': {'target': '='},'link': link,'controller': NavigationAdminOptions,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {var visited = ctrl.path.substring(1);console.log('visited:' + visited);if(visited) {element.find('a[tag="' + visited + '"]').addClass('active');}else{element.find('a:first').addClass('active');}element.find('a').on('click', click);function click(event) {element.find('a').removeClass('active');$(event.target).addClass('active');ctrl.target = $(this).attr('tag');scope.$apply();}}}})();(function() {'use strict';angular.module('harbor.layout.sign.up', ['harbor.services.user']);})();(function() {'use strict';angular.module('harbor.layout.sign.up').controller('SignUpController', SignUpController); SignUpController.$inject = ['$scope', 'SignUpService', '$window', '$filter', 'trFilter'];function SignUpController($scope, SignUpService, $window, $filter, trFilter) {var vm = this; vm.user = {};vm.signUp = signUp;vm.confirm = confirm;$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true;$scope.$broadcast('showDialog', true);}});function signUp(user) {var userObject = {'username': user.username,'email': user.email,'password': user.password,'realname': user.fullName,'comment': user.comment};vm.action = vm.confirm;SignUpService(userObject).success(signUpSuccess).error(signUpFailed);}  function signUpSuccess(data, status) {var title;var message;if(vm.targetType) {title = $filter('tr')('add_new_title');message = $filter('tr')('successful_added');}else{title = $filter('tr')('sign_up');message = $filter('tr')('successful_signed_up');}vm.modalTitle = title;vm.modalMessage = message;$scope.$broadcast('showDialog', true);}function signUpFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));var message;if(vm.targetType) {message = $filter('tr')('failed_to_add_user');}else{message = $filter('tr')('failed_to_sign_up');}$scope.$emit('modalMessage', message);$scope.$emit('raiseError', true);console.log('Signed up failed.');}function confirm() {if(location.pathname === '/add_new') {$window.location.href = '/dashboard';}else{$window.location.href = '/';}}}})();(function() {'use strict';angular.module('harbor.layout.add.new', []);})();(function() {'use strict';angular.module('harbor.layout.add.new').controller('AddNewController', AddNewController);AddNewController.$inject = [];function AddNewController() {var vm = this;}})();(function() {'use strict';angular.module('harbor.layout.account.setting', ['harbor.services.user']);})();(function() {'use strict';angular.module('harbor.layout.account.setting').controller('AccountSettingController', AccountSettingController);AccountSettingController.$inject = ['ChangePasswordService', 'UpdateUserService', '$filter', 'trFilter', '$scope', '$window', 'currentUser'];function AccountSettingController(ChangePasswordService, UpdateUserService, $filter, trFilter, $scope, $window, currentUser) {var vm = this;vm.isOpen = false; vm.hasError = false;vm.errorMessage = '';vm.reset = reset;vm.confirm = confirm;vm.updateUser = updateUser;vm.cancel = cancel;$scope.user = currentUser.get();if(!$scope.user) {$window.location.href = '/';return;}var userId = $scope.user.user_id;$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true;$scope.$broadcast('showDialog', true);}});function reset() {$scope.form.$setUntouched();$scope.form.$setPristine();vm.hasError = false;vm.errorMessage = '';} function confirm() { $window.location.href = '/dashboard';}function updateUser(user) {vm.confirmOnly = true;vm.action = vm.confirm;if(user && angular.isDefined(user.username) && angular.isDefined(user.realname)) {UpdateUserService(userId, user).success(updateUserSuccess).error(updateUserFailed); currentUser.set(user);}}function updateUserSuccess(data, status) {vm.modalTitle = $filter('tr')('change_profile', []);vm.modalMessage = $filter('tr')('successful_changed_profile', []);$scope.$broadcast('showDialog', true);}function updateUserFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));var message;if(status === 409) {message = $filter('tr')('email_has_been_taken');}else{message = $filter('tr')('failed_to_update_user') + data;}$scope.$emit('modalMessage', message);$scope.$emit('raiseError', true);console.log('Failed to update user.');}function cancel(form) {$window.location.href = '/dashboard';}}})();(function() {'use strict';angular.module('harbor.layout.forgot.password', ['harbor.services.user']);})();(function() {'use strict';angular.module('harbor.layout.forgot.password').controller('ForgotPasswordController', ForgotPasswordController);ForgotPasswordController.$inject = ['SendMailService', '$window', '$scope', '$filter', 'trFilter'];function ForgotPasswordController(SendMailService, $window, $scope, $filter, trFilter) {var vm = this;vm.hasError = false;vm.show = false;vm.errorMessage = '';vm.reset = reset;vm.sendMail = sendMail;vm.confirm = confirm;vm.toggleInProgress = false;$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true; $scope.$broadcast('showDialog', true);}});function reset(){vm.hasError = false;vm.errorMessage = '';}function sendMail(user) {if(user && angular.isDefined(user.email)) { vm.action = vm.confirm;vm.toggleInProgress = true;SendMailService(user.email).success(sendMailSuccess).error(sendMailFailed);}}function sendMailSuccess(data, status) {vm.toggleInProgress = false;vm.modalTitle = $filter('tr')('forgot_password');vm.modalMessage = $filter('tr')('mail_has_been_sent');vm.confirmOnly = true;$scope.$broadcast('showDialog', true);}function sendMailFailed(data, status) {vm.toggleInProgress = false;vm.hasError = true;vm.errorMessage = data;if(status === 500) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_send_email'));$scope.$emit('raiseError', true);}console.log('Failed to send mail:' + data);}function confirm() {$window.location.href = '/';} }})();(function() {'use strict';angular.module('harbor.layout.change.password', ['harbor.services.user']);})();(function() {'use strict';angular.module('harbor.layout.change.password').controller('ChangePasswordController', ChangePasswordController);ChangePasswordController.$inject = ['ChangePasswordService', 'UpdateUserService', '$filter', 'trFilter', '$scope', '$window', 'currentUser'];function ChangePasswordController(ChangePasswordService, UpdateUserService, $filter, trFilter, $scope, $window, currentUser) {var vm = this;vm.isOpen = false; vm.hasError = false;vm.errorMessage = '';vm.reset = reset;vm.confirm = confirm;vm.updatePassword = updatePassword;vm.cancel = cancel;$scope.user = currentUser.get();if(!$scope.user) {$window.location.href = '/';return;}var userId = $scope.user.user_id;$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true;$scope.$broadcast('showDialog', true);}});function reset() {$scope.form.$setUntouched();$scope.form.$setPristine();vm.hasError = false;vm.errorMessage = '';} function confirm() { $window.location.href = '/dashboard';}function updatePassword(user) {if(user && angular.isDefined(user.oldPassword) && angular.isDefined(user.password)) {vm.action = vm.confirm;ChangePasswordService(userId, user.oldPassword, user.password).success(changePasswordSuccess).error(changePasswordFailed);} }function changePasswordSuccess(data, status) {vm.modalTitle = $filter('tr')('change_password', []);vm.modalMessage = $filter('tr')('successful_changed_password', []);$scope.$broadcast('showDialog', true);}function changePasswordFailed(data, status) {var message;$scope.$emit('modalTitle', $filter('tr')('error'));console.log('Failed to change password:' + data);if(data === 'old_password_is_not_correct') {message = $filter('tr')('old_password_is_incorrect');}else{message = $filter('tr')('failed_to_change_password');}$scope.$emit('modalMessage', message);$scope.$emit('raiseError', true);}function cancel(form) {$window.location.href = '/dashboard';}}})();(function() {'use strict';angular.module('harbor.layout.reset.password', [ 'harbor.services.user']);})();(function() {'use strict';angular.module('harbor.layout.reset.password').controller('ResetPasswordController', ResetPasswordController);ResetPasswordController.$inject = ['$scope', '$location', 'ResetPasswordService', '$window', 'getParameterByName', '$filter', 'trFilter'];function ResetPasswordController($scope, $location, ResetPasswordService, $window, getParameterByName, $filter, trFilter) {var vm = this;vm.resetUuid = getParameterByName('reset_uuid', $location.absUrl());vm.reset = reset;vm.resetPassword = resetPassword;vm.confirm = confirm;vm.cancel = cancel;vm.hasError = false;vm.errorMessage = '';$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true;$scope.$broadcast('showDialog', true);}});function reset() {vm.hasError = false;vm.errorMessage = '';}function resetPassword(user) {if(user && angular.isDefined(user.password)) {vm.action = vm.confirm;console.log('rececived password:' + user.password + ', reset_uuid:' + vm.resetUuid);ResetPasswordService(vm.resetUuid, user.password).success(resetPasswordSuccess).error(resetPasswordFailed);}}function confirm() {$window.location.href = '/';}function resetPasswordSuccess(data, status) {vm.modalTitle = $filter('tr')('reset_password');vm.modalMessage = $filter('tr')('successful_reset_password');vm.confirmOnly = true;$scope.$broadcast('showDialog', true);}function resetPasswordFailed(data) {vm.hasError = true;$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_reset_pasword') + data);$scope.$emit('raiseError', true);console.log('Failed to reset password:' + data);}function cancel() {$window.location.href = '/'; }}})();(function() {'use strict';angular.module('harbor.layout.index', []);})();(function() { 'use strict';angular.module('harbor.layout.index').controller('IndexController', IndexController);IndexController.$inject = ['$scope', '$filter', 'trFilter', '$timeout'];function IndexController($scope, $filter, trFilter, $timeout) {$scope.subsHeight = 110;$scope.subsSection = 32;$scope.subsSubPane = 226;var vm = this; vm.customBodyHeight = {'height': '180px'};vm.viewAll = viewAll;function viewAll() {var indexDesc = $filter('tr')('index_desc', []);var indexDesc1 = $filter('tr')('index_desc_1', []);var indexDesc2 = $filter('tr')('index_desc_2', []);var indexDesc3 = $filter('tr')('index_desc_3', []);var indexDesc4 = $filter('tr')('index_desc_4', []);var indexDesc5 = $filter('tr')('index_desc_5', []);var indexDesc6 = $filter('tr')('index_desc_6', []);$scope.$emit('modalTitle', $filter('tr')('harbor_intro_title'));$scope.$emit('modalMessage', '<p class="page-content text-justify">'+indexDesc + 			'</p>' +'<ul>' +'<li class="long-line">▪︎ ' + indexDesc1 + '</li>' +'<li class="long-line">▪︎ ' + indexDesc2 + '</li>' +'<li class="long-line">▪︎ ' + indexDesc3 + '</li>' +'<li class="long-line">▪︎ ' + indexDesc4 + '</li>' +'<li class="long-line">▪︎ ' + indexDesc5 + '</li>' +'<li class="long-line">▪︎ ' + indexDesc6 + '</li>' +			'</ul>');var emitInfo = {'contentType': 'text/html','confirmOnly': true,'action': function() {$scope.$broadcast('showDialog', false);}};$scope.$emit('raiseInfo', emitInfo);}$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true;$timeout(function() {$scope.$broadcast('showDialog', true);}, 350);}});  $scope.$on('raiseInfo', function(e, val) {if(val) {vm.action = function() {val.action();$scope.$broadcast('showDialog', false);};vm.contentType = val.contentType;vm.confirmOnly = val.confirmOnly; $scope.$broadcast('showDialog', true);}}); }})();(function() {'use strict';angular.module('harbor.layout.dashboard', ['harbor.services.repository']);})();(function() {'use strict';angular.module('harbor.layout.dashboard').controller('DashboardController', DashboardController);DashboardController.$inject = ['$scope'];function DashboardController($scope) {var vm = this;vm.customBodyHeight = {'height': '165px'};$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true;$scope.$broadcast('showDialog', true);}});}})();(function() {'use strict';angular.module('harbor.layout.project', ['harbor.project.member','harbor.services.project','harbor.services.user']);})();(function() {'use strict';angular.module('harbor.layout.project').controller('ProjectController', ProjectController);ProjectController.$inject = ['$scope', 'ListProjectService', '$timeout', 'currentUser', 'getRole', '$filter', 'trFilter']; function ProjectController($scope, ListProjectService, $timeout, currentUser, getRole, $filter, trFilter) {var vm = this; vm.isOpen = false;vm.projectName = '';vm.publicity = 0; vm.retrieve = retrieve;vm.showAddProject = showAddProject;vm.searchProject = searchProject;vm.showAddButton = showAddButton;vm.togglePublicity = togglePublicity;vm.user = currentUser.get();vm.retrieve();vm.getProjectRole = getProjectRole;vm.searchProjectByKeyPress = searchProjectByKeyPress;$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true;$scope.$broadcast('showDialog', true);}});function retrieve() { ListProjectService(vm.projectName, vm.publicity).success(listProjectSuccess).error(listProjectFailed);}function listProjectSuccess(data, status) {vm.projects = data || [];}function getProjectRole(roleId) {if(roleId !== 0) {var role = getRole({'key': 'roleId', 'value': roleId});return role.name;}return '';}function listProjectFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_get_project'));$scope.$emit('raiseError', true);console.log('Failed to get Project.');}$scope.$on('addedSuccess', function(e, val) {vm.retrieve();}); function showAddProject() {if(vm.isOpen){vm.isOpen = false;}else{vm.isOpen = true;}}function searchProject() {vm.retrieve();}function showAddButton() {if(vm.publicity === 0) {return true;}else{return false;}}function togglePublicity(e) {vm.publicity = e.publicity;vm.isOpen = false;vm.retrieve();console.log('vm.publicity:' + vm.publicity);}function searchProjectByKeyPress($event) {var keyCode = $event.which || $event.keyCode;if(keyCode === 13) {vm.retrieve();}}}})();(function() {'use strict';angular.module('harbor.details', ['harbor.services.project','harbor.services.project.member']);})();(function() {'use strict';angular.module('harbor.details').filter('name', nameFilter);function nameFilter() { return filter;function filter(input, filterInput, key) {input = input || [];var filteredResults = []; if (filterInput !== '') {for(var i = 0; i < input.length; i++) {var item = input[i];if((key === "" && item.indexOf(filterInput) >= 0) || (key !== "" && item[key].indexOf(filterInput) >= 0)) {filteredResults.push(item);continue;} }input = filteredResults;}return input;}}})();(function() {'use strict';angular.module('harbor.details').controller('DetailsController', DetailsController);DetailsController.$inject = ['$scope', '$timeout'];function DetailsController($scope, $timeout) {var vm = this;vm.publicity = false;vm.isProjectMember = false;vm.togglePublicity = togglePublicity;vm.sectionDefaultHeight = {'min-height': '579px'};$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true;$timeout(function() {$scope.$broadcast('showDialog', true);}, 350);}});$scope.$on('raiseInfo', function(e, val) {if(val) {vm.action = function() {val.action();$scope.$broadcast('showDialog', false);};vm.contentType = val.contentType;vm.confirmOnly = val.confirmOnly; $scope.$broadcast('showDialog', true);}});function togglePublicity(e) {vm.publicity = e.publicity;}}})();(function() {'use strict';angular.module('harbor.layout.admin.option', []);})();(function() {'use strict';angular.module('harbor.layout.admin.option').controller('AdminOptionController', AdminOptionController);AdminOptionController.$inject = ['$scope', '$timeout', '$location'];function AdminOptionController($scope, $timeout, $location) {$scope.subsSubPane = 296; var vm = this;vm.toggle = false;vm.target = 'users';vm.toggleAdminOption = toggleAdminOption;$scope.$on('$locationChangeSuccess', function(e) { if($location.path() === '') { vm.target = 'users'; vm.toggle = false; }else{ vm.target = 'system_management';  vm.toggle = true; }});$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true;$timeout(function() {$scope.$broadcast('showDialog', true);}, 350);}});$scope.$on('raiseInfo', function(e, val) {if(val) {vm.action = function() {val.action();$scope.$broadcast('showDialog', false);};vm.contentType = val.contentType;vm.confirmOnly = val.confirmOnly; $scope.$broadcast('showDialog', true);}});function toggleAdminOption(e) {switch(e.target) {case 'users':vm.toggle = false;break;case 'system_management':vm.toggle = true;break;}vm.target = e.target;}}})();(function() {'use strict';angular.module('harbor.layout.admin.option');})();(function() {'use strict';angular.module('harbor.layout.search', []);})();(function() {'use strict';angular.module('harbor.layout.search').controller('SearchController', SearchController); SearchController.$inject = ['$location', 'SearchService', '$scope', '$filter', 'trFilter', 'getParameterByName'];function SearchController($location, SearchService, $scope, $filter, trFilter, getParameterByName) {var vm = this;vm.q = getParameterByName('q', $location.absUrl());console.log('vm.q:' + vm.q);SearchService(vm.q).success(searchSuccess).error(searchFailed);$scope.$on('modalTitle', function(e, val) {vm.modalTitle = val;});$scope.$on('modalMessage', function(e, val) {vm.modalMessage = val;}); $scope.$on('raiseError', function(e, val) {if(val) { vm.action = function() {$scope.$broadcast('showDialog', false);};vm.contentType = 'text/plain';vm.confirmOnly = true;$scope.$broadcast('showDialog', true);}});function searchSuccess(data, status) {vm.repository = data['repository'];vm.project = data['project'];}function searchFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_in_search'));$scope.$emit('raiseError', true);console.log('Failed to search:' + data);}}})();(function() {'use strict';angular.module('harbor.layout.element.height', []);})();(function() {'use strict';angular.module('harbor.layout.element.height').directive('elementHeight', elementHeight);function elementHeight($window) {var directive = {'restrict': 'A','link': link};return directive;function link(scope, element, attrs) {var w = angular.element($window);scope.getDimension = function() {return {'h' : w.height()};};if(!angular.isDefined(scope.subsHeight)){scope.subsHeight = 110;}if(!angular.isDefined(scope.subsSection)) {scope.subsSection = 32;}if(!angular.isDefined(scope.subsSubPane)) {scope.subsSubPane = 226;}if(!angular.isDefined(scope.subsTblBody)) {scope.subsTblBody = 40;}scope.$watch(scope.getDimension, function(current) {if(current) {var h = current.h; element.css({'height': (h - scope.subsHeight) + 'px'});element.find('.section').css({'height': (h - scope.subsHeight - scope.subsSection) + 'px'});element.find('.sub-pane').css({'height': (h - scope.subsHeight - scope.subsSubPane) + 'px'});element.find('.tab-pane').css({'height': (h - scope.subsHeight - scope.subsSubPane - scope.subsSection -100) + 'px'});}}, true);w.on('pageshow, resize', function() { scope.$apply();});}}})();(function() {'use strict';angular.module('harbor.services.search', []);})();(function() {'use strict';angular.module('harbor.services.search').factory('SearchService', SearchService);SearchService.$inject = ['$http', '$log'];function SearchService($http, $log) {return search;function search(keywords) {return $http.get('/api/search',{params: {'q': keywords}});}}})();(function() {'use strict';angular.module('harbor.services.project', []); })();(function() {'use strict';  angular.module('harbor.services.project').factory('ListProjectService', ListProjectService);ListProjectService.$inject = ['$http', '$log'];function ListProjectService($http, $log) {return ListProject;function ListProject(projectName, isPublic) {$log.info('list project projectName:' + projectName, ', isPublic:' + isPublic);return $http.get('/api/projects', {'params' : {'is_public': isPublic,'project_name': projectName}});}}})();(function() {'use strict';angular.module('harbor.services.project').factory('AddProjectService', AddProjectService);AddProjectService.$inject = ['$http', '$log'];function AddProjectService($http, $log) {return AddProject;function AddProject(projectName, isPublic) {return $http.post('/api/projects', {'project_name': projectName,'public': isPublic});}}})();(function() {'use strict';angular.module('harbor.services.project').factory('ToggleProjectPublicityService', ToggleProjectPublicityService);ToggleProjectPublicityService.$inject = ['$http'];function ToggleProjectPublicityService($http) {return toggleProjectPublicity;function toggleProjectPublicity(projectId, isPublic) {return $http.put('/api/projects/' + projectId + '/publicity', {'public': isPublic});}}})();(function() {'use strict';angular.module('harbor.services.project').factory('StatProjectService', StatProjectService);StatProjectService.$inject = ['$http', '$log'];function StatProjectService($http, $log) { return StatProject;function StatProject() {$log.info('statistics projects and repositories');return $http.get('/api/statistics');}}})();(function() {'use strict';angular.module('harbor.services.user', []);})();(function() {'use strict';  angular.module('harbor.services.user').factory('CurrentUserService', CurrentUserService);CurrentUserService.$inject = ['$http'];function CurrentUserService($http, $log) {return CurrentUser;function CurrentUser() {return $http.get('/api/users/current');}}})();(function() {'use strict';  angular.module('harbor.services.user').factory('SignInService', SignInService);SignInService.$inject = ['$http', '$log'];function SignInService($http, $log) {return SignIn;function SignIn(principal, password) {return $http({method: 'POST',url: '/login',headers: {'Content-Type': 'application/x-www-form-urlencoded'},transformRequest: function(obj) {var str = [];for(var p in obj) {str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));}return str.join("&");},data: {'principal': principal, 'password': password}});}}})();(function() {'use strict';  angular.module('harbor.services.user').factory('SignUpService', SignUpService);SignUpService.$inject = ['$http', '$log'];function SignUpService($http, $log) {return SignUp;function SignUp(user) {return $http.post('/api/users', {'username': user.username,'email': user.email,'password': user.password,'realname': user.realname,'comment': user.comment});}}})();(function() {'use strict';angular.module('harbor.services.user').factory('UserExistService', UserExistService);UserExistService.$inject = ['$http', '$log']; function UserExistService($http, $log) {return userExist;function userExist(target, value) {return$.ajax({type: 'POST',url: '/userExists',async: false,data: {'target': target, 'value': value}});} }})();(function() {'use strict';angular.module('harbor.services.user').factory('ChangePasswordService', ChangePasswordService);ChangePasswordService.$inject = ['$http', '$log'];function ChangePasswordService($http, $log) {return ChangePassword;function ChangePassword(userId, oldPassword, newPassword) {return $http.put('/api/users/' + userId + '/password', {'old_password': oldPassword,'new_password': newPassword});}}})();(function() {'use strict';angular.module('harbor.services.user').factory('SendMailService', SendMailService);SendMailService.$inject = ['$http', '$log'];function SendMailService($http, $log) {return SendMail;function SendMail(email) {return $http.get('/sendEmail', {'params': {'email': email}});}}})();(function() {'use strict';angular.module('harbor.services.user').factory('ResetPasswordService', ResetPasswordService);ResetPasswordService.$inject = ['$http', '$log'];function ResetPasswordService($http, $log) {return resetPassword;function resetPassword(uuid, password) {return $http({method: 'POST',url: '/reset',headers: {'Content-Type': 'application/x-www-form-urlencoded'},transformRequest: function(obj) {var str = [];for(var p in obj) {str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));}return str.join("&");},data: {'reset_uuid': uuid, 'password': password}});} }})();(function() {'use strict';  angular.module('harbor.services.user').factory('ListUserService', ListUserService);ListUserService.$inject = ['$http', '$log'];function ListUserService($http, $log) {return listUser;function listUser(username) {return $http.get('/api/users', {'params' : {'username': username}});}}})();(function() {'use strict';angular.module('harbor.services.user').factory('ToggleAdminService', ToggleAdminService);ToggleAdminService.$inject = ['$http'];function ToggleAdminService($http) {return toggleAdmin;function toggleAdmin(userId, enabled) {return $http.put('/api/users/' + userId + '/sysadmin', {'has_admin_role' : enabled});}}})();(function() {'use strict';angular.module('harbor.services.user').factory('DeleteUserService', DeleteUserService);DeleteUserService.$inject = ['$http', '$log'];function DeleteUserService($http, $log) {return DeleteUser;function DeleteUser(userId) {return $http.delete('/api/users/' + userId);}}})();(function() {'use strict';angular.module('harbor.services.user').factory('LogOutService', LogOutService);LogOutService.$inject = ['$http'];function LogOutService($http) {return logOut;function logOut() {return $http.get('/log_out');}}})();(function() {'use strict';angular.module('harbor.services.user').factory('UpdateUserService', UpdateUserService);UpdateUserService.$inject = ['$http'];function UpdateUserService($http) {return updateUser;function updateUser(userId, user) {return $http.put('/api/users/' + userId, {'username': user.username,'email': user.email,'realname': user.realname,'comment': user.comment});}}})();(function() {'use strict';angular.module('harbor.services.repository', []);})();(function() {'use strict';  angular.module('harbor.services.repository').factory('ListRepositoryService', ListRepositoryService);ListRepositoryService.$inject = ['$http', '$log'];function ListRepositoryService($http, $log) {return ListRepository;function ListRepository(projectId, q) {$log.info('list repositories:' + projectId + ', q:' + q);return $http.get('/api/repositories', {'params':{'project_id': projectId,'q': q}});}}})();(function() {'use strict';angular.module('harbor.services.repository').factory('ListTagService', ListTagService);ListTagService.$inject = ['$http', '$log'];function ListTagService($http, $log) {return ListTag;function ListTag(repoName) {return $http.get('/api/repositories/tags', {'params': {'repo_name': repoName}});}}})();(function() {'use strict';angular.module('harbor.services.repository').factory('ListManifestService', ListManifestService);ListManifestService.$inject = ['$http', '$log'];function ListManifestService($http, $log) {return ListManifest;function ListManifest(repoName, tag) {return $http.get('/api/repositories/manifests', {'params': {'repo_name': repoName,'tag': tag}});}}})();(function() {'use strict';angular.module('harbor.services.repository').factory('DeleteRepositoryService', DeleteRepositoryService);DeleteRepositoryService.$inject = ['$http', '$log'];function DeleteRepositoryService($http, $log) {return DeleteRepository;function DeleteRepository(repoName, tag) {var params = (tag === '') ? {'repo_name' : repoName} : {'repo_name': repoName, 'tag': tag};return $http.delete('/api/repositories', {'params': params});}}})();(function() {'use strict';  angular.module('harbor.services.repository').factory('ListTopRepositoryService', ListTopRepositoryService);ListTopRepositoryService.$inject = ['$http', '$log'];function ListTopRepositoryService($http, $log) {return listTopRepository;function listTopRepository(count) {$log.info('Get public repositories which are accessed most:');return $http.get('/api/repositories/top', {'params' : {'count': count,}});}}})();(function() {'use strict';angular.module('harbor.services.project.member', []);})();(function() {'use strict';angular.module('harbor.services.project.member').factory('CurrentProjectMemberService', CurrentProjectMemberService);CurrentProjectMemberService.$inject = ['$http', '$log'];function CurrentProjectMemberService($http, $log) {return currentProjectMember;function currentProjectMember(projectId) {return $http.get('/api/projects/' + projectId + '/members/current');}}})();(function() {'use strict';angular.module('harbor.services.project.member').factory('AddProjectMemberService', AddProjectMemberService);AddProjectMemberService.$inject = ['$http', '$log'];function AddProjectMemberService($http, $log) {return AddProjectMember;function AddProjectMember(projectId, roles, username) {return $http.post('/api/projects/' + projectId + '/members/', {'roles': [ Number(roles) ],'username': username});}}})();(function() {'use strict'; angular.module('harbor.services.project.member').service('ListProjectMemberService', ListProjectMemberService); ListProjectMemberService.$inject = ['$http', '$log']; function ListProjectMemberService($http, $log) {return ListProjectMember;function ListProjectMember(projectId, queryParams) {console.log('project_member project_id:' + projectId);var username = queryParams.username;return $http.get('/api/projects/' + projectId + '/members', {params: {'username': username}});}}})();(function() {'use strict';angular.module('harbor.services.project.member').factory('EditProjectMemberService', EditProjectMemberService);EditProjectMemberService.$inject = ['$http', '$log'];function EditProjectMemberService($http, $log) {return EditProjectMember;function EditProjectMember(projectId, userId, roleId) {return $http.put('/api/projects/' + projectId + '/members/' + userId, {'roles' : [ Number(roleId) ]});}}})();(function() {'use strict';angular.module('harbor.services.project.member').factory('DeleteProjectMemberService', DeleteProjectMemberService);DeleteProjectMemberService.$inject = ['$http', '$log'];function DeleteProjectMemberService($http, $log) {return DeleteProjectMember;function DeleteProjectMember(projectId, userId) {return $http.delete('/api/projects/' + projectId + '/members/' + userId);}}})();(function() {'use strict';angular.module('harbor.services.log', []);})();(function() {'use strict';  angular.module('harbor.services.log').factory('ListLogService', ListLogService);ListLogService.$inject = ['$http', '$log'];function ListLogService($http, $log) {return LogResult;function LogResult(queryParams) {var projectId = queryParams.projectId;var username = queryParams.username;var beginTimestamp = queryParams.beginTimestamp;var endTimestamp = queryParams.endTimestamp;var keywords = queryParams.keywords;return $http.post('/api/projects/' + projectId + '/logs/filter', {'begin_timestamp' : beginTimestamp,'end_timestamp' : endTimestamp,'keywords' : keywords,'project_id': Number(projectId),'username' : username});}}})();(function() {'use strict';  angular.module('harbor.services.log').factory('ListIntegratedLogService', ListIntegratedLogService);ListIntegratedLogService.$inject = ['$http', '$log'];function ListIntegratedLogService($http, $log) {return listIntegratedLog;function listIntegratedLog(lines) {$log.info('Get recent logs of the projects which the user is a member of:');return $http.get('/api/logs', {'params' : {'lines': lines,}});}}})();(function() {'use strict';angular.module('harbor.services.replication.policy', []);})();(function() {'use strict';angular.module('harbor.services.replication.policy').factory('ListReplicationPolicyService', ListReplicationPolicyService);ListReplicationPolicyService.$inject = ['$http'];function ListReplicationPolicyService($http) { return listReplicationPolicy;function listReplicationPolicy(policyId, projectId, name) {return $http.get('/api/policies/replication/' + policyId, {'params': {'project_id': projectId,'name': name}});}}})();(function() {'use strict';angular.module('harbor.services.replication.policy').factory('CreateReplicationPolicyService', CreateReplicationPolicyService);CreateReplicationPolicyService.$inject = ['$http'];function CreateReplicationPolicyService($http) {return createReplicationPolicy;function createReplicationPolicy(policy) {return $http.post('/api/policies/replication', {'project_id': policy.projectId,'target_id': policy.targetId,'name': policy.name,'enabled': policy.enabled,'description': policy.description,'cron_str': policy.cronStr,'start_time': policy.startTime});}}})();(function() {'use strict';angular.module('harbor.services.replication.policy').factory('ToggleReplicationPolicyService', ToggleReplicationPolicyService);ToggleReplicationPolicyService.$inject = ['$http'];function ToggleReplicationPolicyService($http) {return toggleReplicationPolicy;function toggleReplicationPolicy(policyId, enabled) {return $http.put('/api/policies/replication/' + policyId + '/enablement', {'enabled': enabled});}}})();(function() {'use strict';angular.module('harbor.services.replication.policy').factory('UpdateReplicationPolicyService', UpdateReplicationPolicyService);UpdateReplicationPolicyService.$inject = ['$http'];function UpdateReplicationPolicyService($http) {return updateReplicationPolicy;function updateReplicationPolicy(policyId, policy) {return $http.put('/api/policies/replication/' + policyId, {'name': policy.name,'description': policy.description,'enabled': policy.enabled,'target_id': policy.targetId});}} })();(function() {'use strict';angular.module('harbor.services.replication.job', []);})();(function() {'use strict';angular.module('harbor.services.replication.job').factory('ListReplicationJobService', ListReplicationJobService);ListReplicationJobService.$inject = ['$http'];function ListReplicationJobService($http) {return listReplicationJob;function listReplicationJob(policyId, repository, status, startTime, endTime) {return $http.get('/api/jobs/replication/', {'params': {'policy_id': policyId,'repository': repository,'status': status,'start_time': startTime,'end_time': endTime}});}}})();(function() {'use strict';angular.module('harbor.services.destination', []);})();(function() {'use strict';angular.module('harbor.services.destination').factory('CreateDestinationService', CreateDestinationService);CreateDestinationService.$inject = ['$http'];function CreateDestinationService($http) {return createDestination;function createDestination(name, endpoint, username, password) {return $http.post('/api/targets', {'name': name,'endpoint': endpoint,'username': username,'password': password});}}})();(function() {'use strict';angular.module('harbor.services.destination').factory('ListDestinationService', ListDestinationService);ListDestinationService.$inject = ['$http'];function ListDestinationService($http) {return listDestination;function listDestination(targetId, name) {return $http.get('/api/targets/' + targetId, {'params': {'name': name}});}}})();(function() {'use strict';angular.module('harbor.services.destination').factory('PingDestinationService', PingDestinationService);PingDestinationService.$inject = ['$http'];function PingDestinationService($http) {return pingDestination;function pingDestination(target) {var payload = {};if(target['id']) {payload = {'id': target['id']};}else {payload = {'name': target['name'],'endpoint': target['endpoint'],'username': target['username'],'password': target['password']};}return $http({ 'method': 'POST','url': '/api/targets/ping','headers': {'Content-Type': 'application/x-www-form-urlencoded'},'transformRequest': function(obj) {var str = [];for(var p in obj) {str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));}return str.join("&");},'timeout': 30000,'data': payload});}}})();(function() {'use strict';angular.module('harbor.services.destination').factory('UpdateDestinationService', UpdateDestinationService);UpdateDestinationService.$inject = ['$http'];function UpdateDestinationService($http) {return updateDestination;function updateDestination(targetId, target) {return $http.put('/api/targets/' + targetId, {'name': target.name,'endpoint': target.endpoint,'username': target.username,'password': target.password});}}})();(function() {'use strict';angular.module('harbor.services.destination').factory('DeleteDestinationService', DeleteDestinationService);DeleteDestinationService.$inject = ['$http'];function DeleteDestinationService($http) {return deleteDestination;function deleteDestination(targetId) {return $http.delete('/api/targets/' + targetId);}}})();(function() {'use strict';angular.module('harbor.services.destination').factory('ListDestinationPolicyService', ListDestinationPolicyService);ListDestinationPolicyService.$inject = ['$http'];function ListDestinationPolicyService($http) {return listDestinationPolicy;function listDestinationPolicy(targetId) {return $http.get('/api/targets/' + targetId + '/policies/');}}})();(function() {'use strict';angular.module('harbor.session', ['harbor.services.user']);})();(function() { 'use strict';angular.module('harbor.session').controller('CurrentUserController', CurrentUserController); CurrentUserController.$inject = ['$scope', 'CurrentUserService', 'currentUser', '$window', '$document'];function CurrentUserController($scope, CurrentUserService, currentUser, $window, $document) {var vm = this; CurrentUserService().then(getCurrentUserComplete).catch(getCurrentUserFailed);function getCurrentUserComplete(response) {if(angular.isDefined(response)) {currentUser.set(response.data);if(location.pathname === '/') {$window.location.href = '/dashboard';}} }function getCurrentUserFailed(e){console.log('No session of current user.');} } })();(function() {'use strict';angular.module('harbor.optional.menu', ['harbor.services.user','harbor.services.i18n']);})();(function() {'use strict';angular.module('harbor.optional.menu').directive('optionalMenu', optionalMenu);OptionalMenuController.$inject = ['$window', 'I18nService', 'LogOutService', 'currentUser', '$timeout'];function OptionalMenuController($window, I18nService, LogOutService, currentUser, $timeout) {var vm = this;vm.currentLanguage = I18nService().getCurrentLanguage();vm.languageName = I18nService().getLanguageName(vm.currentLanguage);I18nService().setCurrentLanguage(vm.currentLanguage);console.log('current language:' + vm.languageName);vm.supportLanguages = I18nService().getSupportLanguages(); vm.user = currentUser.get();vm.setLanguage = setLanguage; vm.logOut = logOut;function setLanguage(language) {I18nService().setCurrentLanguage(language);var hash = $window.location.hash;$window.location.href = '/language?lang=' + language + '&hash=' + encodeURIComponent(hash);}function logOut() {LogOutService().success(logOutSuccess).error(logOutFailed);}function logOutSuccess(data, status) {currentUser.unset();$window.location.href= '/';}function logOutFailed(data, status) {console.log('Failed to log out:' + data);}}function optionalMenu() {var directive = {'restrict': 'E','templateUrl': '/optional_menu?timestamp=' + new Date().getTime(),'scope': true,'controller': OptionalMenuController,'controllerAs': 'vm','bindToController': true};return directive;}})();(function() {'use strict';angular.module('harbor.modal.dialog', []);})();(function() {'use strict';angular.module('harbor.modal.dialog').directive('modalDialog', modalDialog);ModalDialogController.$inject = ['$scope'];function ModalDialogController($scope) {var vm = this;}function modalDialog() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/modal-dialog/modal-dialog.directive.html','link': link,'scope': {'contentType': '@','modalTitle': '@','modalMessage': '@','action': '&','confirmOnly': '='},'controller': ModalDialogController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) { scope.$watch('contentType', function(current) {if(current) {ctrl.contentType = current;}});scope.$watch('confirmOnly', function(current) {if(current) {ctrl.confirmOnly = current;}});scope.$watch('vm.modalMessage', function(current) {if(current) {switch(ctrl.contentType) {case 'text/html':element.find('.modal-body').html(current); break;case 'text/plain':element.find('.modal-body').text(current); break;default:element.find('.modal-body').text(current); break;}}});scope.$on('showDialog', function(e, val) {if(val) {element.find('#myModal').modal('show');}else{element.find('#myModal').modal('hide');}});element.find('#btnOk').on('click', clickHandler);function clickHandler(e) {ctrl.action();}}}})();(function() {'use strict';angular.module('harbor.validator', ['harbor.services.user']);})();(function() {'use strict';angular.module('harbor.validator').constant('INVALID_CHARS', [",","~","#", "$", "%"]).constant('PASSWORD_REGEXP', /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).{7,20}$/).constant('PROJECT_REGEXP', /^[a-z0-9](?:-*[a-z0-9])*(?:[._][a-z0-9](?:-*[a-z0-9])*)*$/);})();(function() {'use strict';angular.module('harbor.validator').directive('password', password);password.$inject = ['PASSWORD_REGEXP'];function password(PASSWORD_REGEXP) {var directive = {'require' : 'ngModel','link': link};return directive;function link (scope, element, attrs, ctrl) {ctrl.$validators.password = validator; function validator(modelValue, viewValue) {return PASSWORD_REGEXP.test(modelValue);}}}})();(function() {'use strict';angular.module('harbor.validator').directive('compareTo', compareTo);function compareTo() {var directive = {'require' : 'ngModel','scope':{'otherModelValue': '=compareTo'},'link': link};return directive;function link (scope, element, attrs, ctrl) {ctrl.$validators.compareTo = validator;function validator(modelValue) {return modelValue === scope.otherModelValue;}scope.$watch("otherModelValue", function(current, origin) {ctrl.$validate();});}}})();(function() {'use strict';angular.module('harbor.validator').directive('userExists', userExists);userExists.$inject = ['UserExistService'];function userExists(UserExistService) {var directive = {'require': 'ngModel','scope': {'target': '@'},'link': link};return directive;function link(scope, element, attrs, ctrl) {var valid = true; ctrl.$validators.userExists = validator;function validator(modelValue, viewValue) {console.log('modelValue:' + modelValue + ', viewValue:' + viewValue); if(ctrl.$isEmpty(modelValue)) {console.log('Model value is empty.');return true;}UserExistService(attrs.target, modelValue).success(userExistSuccess).error(userExistFailed); function userExistSuccess(data, status) {valid = !data;if(!valid) {console.log('Model value already exists');}}function userExistFailed(data, status) {console.log('Failed to in retrieval:' + data);} return valid;}}}})();(function() {'use strict';angular.module('harbor.validator').directive('invalidChars', invalidChars);invalidChars.$inject = ['INVALID_CHARS'];function invalidChars(INVALID_CHARS) {var directive = {'require': 'ngModel','link': link};return directive;function link(scope, element, attrs, ctrl) {ctrl.$validators.invalidChars = validator;function validator(modelValue, viewValue) {if(ctrl.$isEmpty(modelValue)) {return true;}for(var i = 0; i < INVALID_CHARS.length; i++) {if(modelValue.indexOf(INVALID_CHARS[i]) >= 0) {return false;}}return true;}}}})();(function() {'use strict';angular.module('harbor.validator').directive('projectName', projectName);projectName.$inject = ['PROJECT_REGEXP'];function projectName(PROJECT_REGEXP) {var directive = {'require': 'ngModel','link': link};return directive;function link(scope, element, attrs, ctrl) {ctrl.$validators.projectName = validator;function validator(modelValue, viewValue) {return PROJECT_REGEXP.test(modelValue);}}}})();(function() {'use strict';angular.module('harbor.search', ['harbor.services.search']);})();(function() {'use strict';angular.module('harbor.search').directive('search', search);SearchController.$inject = ['SearchService', '$scope'];function SearchController(SearchService, $scope) {var vm = this;vm.keywords = "";vm.search = searchByFilter;vm.filterBy = 'repository';searchByFilter();function searchByFilter() {SearchService(vm.keywords).success(searchSuccess).error(searchFailed);}function searchSuccess(data, status) {console.log('filterBy:' + vm.filterBy + ", data:" + data);vm.searchResult = data[vm.filterBy];}function searchFailed(data, status) {console.log('Failed to search:' + data);}}function search() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/search/search.directive.html','scope': {'filterBy': '='},'controller': SearchController,'controllerAs': 'vm','bindToController': true};return directive; }})();(function() {'use strict';angular.module('harbor.search').directive('searchInput', searchInput);SearchInputController.$inject = ['$scope', '$location', '$window'];function SearchInputController($scope, $location, $window) {var vm = this;vm.searchFor = searchFor;function searchFor(searchContent) {$location.path('/search').search({'q': searchContent});$window.location.href = $location.url();}}function searchInput() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/search/search-input.directive.html','scope': {'searchInput': '=',},'link': link,'controller': SearchInputController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {element.find('input[type="text"]').on('keydown', keydownHandler);function keydownHandler(e) {if($(this).is(':focus') && e.keyCode === 13) {ctrl.searchFor($(this).val());}}}}})();(function() {'use strict';angular.module('harbor.sign.in', ['harbor.services.user']);})();(function() {'use strict';angular.module('harbor.sign.in').directive('signIn', signIn);SignInController.$inject = ['SignInService', 'LogOutService', 'currentUser', 'I18nService', '$window', '$scope', 'getParameterByName', '$location'];function SignInController(SignInService, LogOutService, currentUser, I18nService, $window, $scope, getParameterByName, $location) {var vm = this;vm.hasError = false;vm.errorMessage = '';vm.reset = reset;vm.doSignIn = doSignIn;vm.doSignUp = doSignUp;vm.doForgotPassword = doForgotPassword; vm.doContinue = doContinue;vm.doLogOut = doLogOut; vm.signInTIP = false;function reset() {vm.hasError = false;vm.errorMessage = '';} function doSignIn(user) {if(user && angular.isDefined(user.principal) && angular.isDefined(user.password)) {vm.lastUrl = getParameterByName('last_url', $location.absUrl());vm.signInTIP = true;SignInService(user.principal, user.password).success(signedInSuccess).error(signedInFailed);}}function signedInSuccess(data, status) {if(vm.lastUrl) {$window.location.href = vm.lastUrl;return;}$window.location.href = "/dashboard";}function signedInFailed(data, status) {vm.signInTIP = false;if(status === 401) {vm.hasError = true;vm.errorMessage = 'username_or_password_is_incorrect';}console.log('Failed to sign in:' + data + ', status:' + status); }function doSignUp() {$window.location.href = '/sign_up';}function doForgotPassword() {$window.location.href = '/forgot_password';}function doContinue() {$window.location.href = '/dashboard';}function doLogOut() {LogOutService().success(logOutSuccess).error(logOutFailed);}function logOutSuccess(data, status) {currentUser.unset();I18nService().unset();$window.location.href= '/';}function logOutFailed(data, status) {console.log('Failed to to log out:' + data);}}function signIn() {var directive = {'restrict': 'E','templateUrl': '/sign_in','scope': true,'controller': SignInController,'controllerAs': 'vm','bindToController': true};return directive;}})();(function() {'use strict';angular.module('harbor.project', ['harbor.services.project','harbor.services.user']);})();(function() {'use strict';angular.module('harbor.project').directive('addProject', addProject);AddProjectController.$inject = ['AddProjectService', '$scope'];function AddProjectController(AddProjectService, $scope) {var vm = this;$scope.p = {};var vm0 = $scope.p;vm0.projectName = '';vm.isPublic = false;vm.addProject = addProject;vm.cancel = cancel;vm.reset = reset;vm.hasError = false;vm.errorMessage = '';function addProject(p) {if(p && angular.isDefined(p.projectName)) {AddProjectService(p.projectName, vm.isPublic).success(addProjectSuccess).error(addProjectFailed);}}function addProjectSuccess(data, status) {$scope.$emit('addedSuccess', true);vm.hasError = false;vm.errorMessage = '';vm.isOpen = false;}function addProjectFailed(data, status) {vm.hasError = true;if(status === 400 && vm0.projectName !== '' && vm0.projectName.length < 4) {vm.errorMessage = 'project_name_is_too_short';}if(status === 400 && vm0.projectName.length > 30) {vm.errorMessage = 'project_name_is_too_long';}if(status === 409 && vm0.projectName !== '') {vm.errorMessage = 'project_already_exist';}console.log('Failed to add project:' + status);}function cancel(form){if(form) {form.$setPristine();form.$setUntouched();}vm.isOpen = false;vm0.projectName = '';vm.isPublic = false;vm.hasError = false; vm.close = close;vm.errorMessage = '';} function reset() {vm.hasError = false;vm.errorMessage = '';}}function addProject() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/project/add-project.directive.html','controller': AddProjectController,'scope' : {'isOpen': '='},'link': link,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {scope.form.$setPristine();scope.form.$setUntouched();}} })();(function() {'use strict';angular.module('harbor.project').directive('publicityButton', publicityButton);PublicityButtonController.$inject = ['$scope', 'ToggleProjectPublicityService', '$filter', 'trFilter'];function PublicityButtonController($scope, ToggleProjectPublicityService, $filter, trFilter) {var vm = this;vm.toggle = toggle;function toggle() {if(vm.isPublic) {vm.isPublic = false;}else{vm.isPublic = true;}ToggleProjectPublicityService(vm.projectId, vm.isPublic).success(toggleProjectPublicitySuccess).error(toggleProjectPublicityFailed);}function toggleProjectPublicitySuccess(data, status) {console.log('Successful toggle project publicity.');}function toggleProjectPublicityFailed(e, status) {$scope.$emit('modalTitle', $filter('tr')('error'));var message;if(status === 403) {message = $filter('tr')('failed_to_toggle_publicity_insuffient_permissions');}else{message = $filter('tr')('failed_to_toggle_publicity');}$scope.$emit('modalMessage', message);$scope.$emit('raiseError', true);if(vm.isPublic) {vm.isPublic = false;}else{vm.isPublic = true;}console.log('Failed to toggle project publicity:' + e);}}function publicityButton() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/project/publicity-button.directive.html','scope': {'isPublic': '=','owned': '=','projectId': '='},'link': link,'controller': PublicityButtonController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attr, ctrl) {scope.$watch('vm.isPublic', function(current, origin) {if(current) {ctrl.isPublic = current;}});}}})();(function() {'use strict';angular.module('harbor.details').directive('switchPaneProjects', switchPaneProjects);SwitchPaneProjectsController.$inject = ['$scope'];function SwitchPaneProjectsController($scope) {var vm = this; $scope.$watch('vm.selectedProject', function(current, origin) {if(current){vm.projectName = current.name;vm.selectedProject = current;}});vm.switchPane = switchPane;function switchPane() {if(vm.isOpen) {vm.isOpen = false;}else{vm.isOpen = true;}}}function switchPaneProjects() {var directive = {restrict: 'E',templateUrl: '/static/resources/js/components/details/switch-pane-projects.directive.html',scope: {'isOpen': '=','selectedProject': '='},controller: SwitchPaneProjectsController,controllerAs: 'vm',bindToController: true};return directive;}})();(function() {'use strict';angular.module('harbor.details').directive('retrieveProjects', retrieveProjects);RetrieveProjectsController.$inject = ['$scope', 'nameFilter', '$filter', 'trFilter', 'ListProjectService', '$location', 'getParameterByName', 'CurrentProjectMemberService', '$window']; function RetrieveProjectsController($scope, nameFilter, $filter, trFilter, ListProjectService, $location, getParameterByName, CurrentProjectMemberService, $window) {var vm = this;vm.projectName = '';vm.isOpen = false;if(getParameterByName('is_public', $location.absUrl())) {vm.isPublic = getParameterByName('is_public', $location.absUrl()) === 'true' ? 1 : 0;vm.publicity = (vm.isPublic === 1) ? true : false;}vm.retrieve = retrieve;vm.filterInput = '';vm.selectItem = selectItem;vm.checkProjectMember = checkProjectMember; $scope.$watch('vm.selectedProject', function(current, origin) {if(current) {vm.selectedId = current.project_id;}}); $scope.$watch('vm.publicity', function(current, origin) { vm.publicity = current ? true : false;vm.isPublic =vm.publicity ? 1 : 0;vm.projectType = (vm.isPublic === 1) ? 'public_projects' : 'my_projects';vm.retrieve();}); function retrieve() {ListProjectService(vm.projectName, vm.isPublic).success(getProjectSuccess).error(getProjectFailed);}function getProjectSuccess(data, status) {vm.projects = data;if(vm.projects == null) {vm.isPublic = 1;vm.publicity = true;vm.projectType = 'public_projects';console.log('vm.projects is null, load public projects.');return;}if(angular.isArray(vm.projects) && vm.projects.length > 0) {vm.selectedProject = vm.projects[0];}else{$window.location.href = '/project';}if(getParameterByName('project_id', $location.absUrl())){angular.forEach(vm.projects, function(value, index) {if(value['project_id'] === Number(getParameterByName('project_id', $location.absUrl()))) {vm.selectedProject = value;}}); } $location.search('project_id', vm.selectedProject.project_id);vm.checkProjectMember(vm.selectedProject.project_id);vm.resultCount = vm.projects.length;$scope.$watch('vm.filterInput', function(current, origin) {vm.resultCount = $filter('name')(vm.projects, vm.filterInput, 'name').length;});}function getProjectFailed(data) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_get_project'));$scope.$emit('raiseError', true);console.log('Failed to list projects.');}function selectItem(item) {vm.selectedProject = item;$location.search('project_id', vm.selectedProject.project_id);} $scope.$on('$locationChangeSuccess', function(e) {var projectId = getParameterByName('project_id', $location.absUrl());vm.isOpen = false; });function checkProjectMember(projectId) {CurrentProjectMemberService(projectId).success(getCurrentProjectMemberSuccess).error(getCurrentProjectMemberFailed);}function getCurrentProjectMemberSuccess(data, status) {console.log('Successful get current project member:' + status);vm.isProjectMember = true;}function getCurrentProjectMemberFailed(data, status) {vm.isProjectMember = false; console.log('Current user has no member for the project:' + status +', location.url:' + $location.url());}}function retrieveProjects() {var directive = {restrict: 'E',templateUrl: '/static/resources/js/components/details/retrieve-projects.directive.html',scope: {'isOpen': '=','selectedProject': '=','publicity': '=','isProjectMember': '='},link: link,controller: RetrieveProjectsController,bindToController: true,controllerAs: 'vm'};return directive;function link(scope, element, attrs, ctrl) {$(document).on('click', clickHandler);function clickHandler(e) {$('[data-toggle="popover"]').each(function () {if (!$(this).is(e.target) &&  $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) { $(this).parent().popover('hide');}});var targetId = $(e.target).attr('id');if(targetId === 'switchPane' ||  targetId === 'retrievePane' || targetId === 'retrieveFilter') {return;}else{ctrl.isOpen = false;scope.$apply();}}}}})();(function() {'use strict';angular.module('harbor.repository', ['harbor.services.repository']);})();(function() {'use strict';angular.module('harbor.repository').directive('listRepository', listRepository); ListRepositoryController.$inject = ['$scope', 'ListRepositoryService', 'DeleteRepositoryService', '$filter', 'trFilter', '$location', 'getParameterByName'];function ListRepositoryController($scope, ListRepositoryService, DeleteRepositoryService, $filter, trFilter, $location, getParameterByName) {$scope.subsTabPane = 30;var vm = this;vm.sectionHeight = {'min-height': '579px'};vm.filterInput = '';vm.toggleInProgress = [];var hashValue = $location.hash();if(hashValue) {var slashIndex = hashValue.indexOf('/');if(slashIndex >=0) {vm.filterInput = hashValue.substring(slashIndex + 1);}else{vm.filterInput = hashValue;}}vm.retrieve = retrieve;vm.tagCount = {};vm.projectId = getParameterByName('project_id', $location.absUrl());vm.retrieve(); $scope.$on('$locationChangeSuccess', function() {vm.projectId = getParameterByName('project_id', $location.absUrl());vm.filterInput = '';vm.retrieve();});$scope.$watch('vm.repositories', function(current) {if(current) {vm.repositories = current || [];}});$scope.$on('repoName', function(e, val) {vm.repoName = val;});$scope.$on('tag', function(e, val){vm.tag = val;});$scope.$on('tagCount', function(e, val) {vm.tagCount = val;});$scope.$on('tags', function(e, val) {vm.tags = val;});vm.deleteByRepo = deleteByRepo;vm.deleteByTag = deleteByTag;vm.deleteImage =deleteImage;function retrieve(){ListRepositoryService(vm.projectId, vm.filterInput).success(getRepositoryComplete).error(getRepositoryFailed);} function getRepositoryComplete(data, status) {vm.repositories = data || [];$scope.$broadcast('refreshTags', true);}function getRepositoryFailed(response) {console.log('Failed to list repositories:' + response);} function deleteByRepo(repoName) { vm.repoName = repoName;vm.tag = '';$scope.$emit('modalTitle', $filter('tr')('alert_delete_repo_title', [repoName]));$scope.$emit('modalMessage', $filter('tr')('alert_delete_repo', [repoName]));var emitInfo = {'confirmOnly': false,'contentType': 'text/html','action' : vm.deleteImage};$scope.$emit('raiseInfo', emitInfo);}function deleteByTag() {$scope.$emit('modalTitle', $filter('tr')('alert_delete_tag_title', [vm.tag]));var message;console.log('vm.tagCount:' + angular.toJson(vm.tagCount[vm.repoName]));$scope.$emit('modalMessage',$filter('tr')('alert_delete_tag', [vm.tag]));var emitInfo = {'confirmOnly': false,'contentType': 'text/html','action' : vm.deleteImage};$scope.$emit('raiseInfo', emitInfo);}function deleteImage() {console.log('Delete image, repoName:' + vm.repoName + ', tag:' + vm.tag);vm.toggleInProgress[vm.repoName + '|' + vm.tag] = true;DeleteRepositoryService(vm.repoName, vm.tag).success(deleteRepositorySuccess).error(deleteRepositoryFailed);}function deleteRepositorySuccess(data, status) {vm.toggleInProgress[vm.repoName + '|' + vm.tag] = false;vm.retrieve();}function deleteRepositoryFailed(data, status) {vm.toggleInProgress[vm.repoName + '|' + vm.tag] = false;$scope.$emit('modalTitle', $filter('tr')('error'));var message;if(status === 401) {message = $filter('tr')('failed_to_delete_repo_insuffient_permissions');}else{message = $filter('tr')('failed_to_delete_repo');}$scope.$emit('modalMessage', message);$scope.$emit('raiseError', true);console.log('Failed to delete repository:' + angular.toJson(data));}}function listRepository() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/repository/list-repository.directive.html','scope': {'sectionHeight': '='},'link': link,'controller': ListRepositoryController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attr, ctrl) {element.find('#txtSearchInput').on('keydown', function(e) {if($(this).is(':focus') && e.keyCode === 13) {ctrl.retrieve();}});}}})();(function() {'use strict';angular.module('harbor.repository').directive('listTag', listTag);ListTagController.$inject = ['$scope', 'ListTagService', '$filter', 'trFilter'];function ListTagController($scope, ListTagService, $filter, trFilter) {var vm = this;vm.tags = [];vm.retrieve = retrieve;$scope.$watch('vm.repoName', function(current, origin) {if(current) {console.log('vm.repoName in tags:' + current);vm.retrieve();}});$scope.$on('refreshTags', function(e, val) {if(val) {vm.retrieve();}});vm.deleteTag = deleteTag;function retrieve() {ListTagService(vm.repoName).success(getTagSuccess).error(getTagFailed);}function getTagSuccess(data) {vm.tags = data || [];vm.tagCount[vm.repoName] = vm.tags.length;$scope.$emit('tags', vm.tags);$scope.$emit('tagCount', vm.tagCount);angular.forEach(vm.tags, function(item) {vm.toggleInProgress[vm.repoName + '|' + item] = false;});}function getTagFailed(data) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_get_tag') + data);$scope.$emit('raiseError', true);console.log('Failed to get tag:' + data);}function deleteTag(e) {$scope.$emit('repoName', e.repoName); $scope.$emit('tag', e.tag);vm.deleteByTag();}}function listTag() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/repository/list-tag.directive.html','scope': {'tagCount': '=','associateId': '=','repoName': '=','toggleInProgress': '=','deleteByTag': '&'},'replace': true,'controller': ListTagController,'controllerAs': 'vm','bindToController': true};return directive;}})();(function() {'use strict';angular.module('harbor.repository').directive('popupDetails', popupDetails);PopupDetailsController.$inject = ['ListManifestService', '$filter', 'dateLFilter'];function PopupDetailsController(ListManifestService, $filter, dateLFilter) {var vm = this;vm.retrieve = retrieve;function retrieve() {ListManifestService(vm.repoName, vm.tag).success(getManifestSuccess).error(getManifestFailed);}function getManifestSuccess(data, status) {console.log('Successful get manifest:' + data);vm.manifest = data;vm.manifest['Created'] = $filter('dateL')(vm.manifest['Created'], 'YYYY-MM-DD HH:mm:ss');}function getManifestFailed(data, status) {console.log('Failed to get manifest:' + data);}}function popupDetails() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/repository/popup-details.directive.html','scope': {'repoName': '@','tag': '@','index': '@'},'replace': true,'link': link,'controller': PopupDetailsController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {ctrl.retrieve();scope.$watch('vm.manifest', function(current) {if(current) {element.popover({'template': '<div class="popover" role="tooltip"><div class="arrow"></div><div class="popover-title"></div><div class="popover-content"></div></div>','title': '<div class="pull-right clearfix"><a href="javascript:void(0);"><span class="glyphicon glyphicon-remove-circle"></span></a></div>','content': generateContent,'html': true}).on('shown.bs.popover', function(e){var self = jQuery(this); $('[type="text"]:input', self.parent()).on('click', function() {$(this).select();});self.parent().find('.glyphicon.glyphicon-remove-circle').on('click', function() {element.trigger('click');});});}});function generateContent() {var content ='<form class="form-horizontal" width="100%">' +'<div class="form-group">' +'<label class="col-sm-3 control-label">Id</label>' +'<div class="col-sm-9"><p class="form-control-static long-line long-line-margin-right"><input type="text" id="txtImageId" value="' + ctrl.manifest['Id'] + '" readonly size="32"></p></div></div>' +'<div class="form-group"><label class="col-sm-3 control-label">Parent</label>' +'<div class="col-sm-9"><p class="form-control-static long-line long-line-margin-right"><input type="text" id="txtImageId" value="' + ctrl.manifest['Parent'] + '" readonly size="32"></p></div></div>' +'<div class="form-group"><label class="col-sm-3 control-label">Created</label>' +'<div class="col-sm-9"><p class="form-control-static long-line-margin-right">' + ctrl.manifest['Created'] + '</p></div></div>' +'<div class="form-group"><label class="col-sm-3 control-label">Duration Days</label>' +'<div class="col-sm-9"><p class="form-control-static long-line-margin-right">' + (ctrl.manifest['Duration Days'] === '' ? 'N/A' : ctrl.manifest['Duration Days']) + ' days</p></div></div>' +'<div class="form-group"><label class="col-sm-3 control-label">Author</label>' +'<div class="col-sm-9"><p class="form-control-static long-line-margin-right">' + (ctrl.manifest['Author'] === '' ? 'N/A' : ctrl.manifest['Author']) + '</p></div></div>' +'<div class="form-group"><label class="col-sm-3 control-label">Architecture</label>' + '<div class="col-sm-9"><p class="form-control-static long-line-margin-right">' + (ctrl.manifest['Architecture'] === '' ? 'N/A' : ctrl.manifest['Architecture']) + '</p></div></div>' +'<div class="form-group"><label class="col-sm-3 control-label">Docker Version</label>' +'<div class="col-sm-9"><p class="form-control-static long-line-margin-right">' + (ctrl.manifest['Docker Version'] === '' ? 'N/A' : ctrl.manifest['Docker Version']) + '</p></div></div>' +'<div class="form-group"><label class="col-sm-3 control-label">OS</label>' +'<div class="col-sm-9"><p class="form-control-static long-line-margin-right">' + (ctrl.manifest['OS']=== '' ? 'N/A' : ctrl.manifest['OS']) + '</p></div></div>' +'</form>';return content;}}}})();(function() {'use strict';angular.module('harbor.repository').directive('pullCommand', pullCommand);function PullCommandController() {}function pullCommand() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/repository/pull-command.directive.html','scope': {'repoName': '@','tag': '@'},'link': link,'controller': PullCommandController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) { ctrl.harborRegUrl = $('#HarborRegUrl').val() + '/';element.find('input[type="text"]').on('click', function() {$(this).select();});element.find('a').on('click', clickHandler);function clickHandler(e) {element.find('input[type="text"]').select();}}}})();(function() {'use strict';angular.module('harbor.project.member', ['harbor.services.project.member','harbor.services.user']);})();(function() {'use strict';angular.module('harbor.project.member').constant('roles', roles).factory('getRole', getRole);function roles() {return [{'id': '1', 'name': 'project_admin', 'roleName': 'projectAdmin'},{'id': '2', 'name': 'developer', 'roleName': 'developer'},{'id': '3', 'name': 'guest', 'roleName': 'guest'}];}getRole.$inject = ['roles', '$filter', 'trFilter'];function getRole(roles, $filter, trFilter) {var r = roles();return get; function get(query) { for(var i = 0; i < r.length; i++) {var role = r[i];if(query.key === 'roleName' && role.roleName === query.value || query.key === 'roleId' && role.id === String(query.value)) { return role;}}}}})();(function() {'use strict';angular.module('harbor.project.member').directive('addProjectMember', addProjectMember); AddProjectMemberController.$inject = ['$scope', 'roles', 'AddProjectMemberService']; function AddProjectMemberController($scope, roles, AddProjectMemberService) {var vm = this;$scope.pm = {};var pm = $scope.pm;vm.roles = roles();vm.optRole = 1; vm.save = save;vm.cancel = cancel;vm.reset = reset;vm.hasError = false;vm.errorMessage = '';function save(pm) { if(pm && angular.isDefined(pm.username)) {AddProjectMemberService(vm.projectId, vm.optRole, pm.username).success(addProjectMemberComplete).error(addProjectMemberFailed);}} function cancel(form) {form.$setPristine();form.$setUntouched();vm.isOpen = false;pm.username = '';vm.optRole = 1;vm.hasError = false;vm.errorMessage = '';}function addProjectMemberComplete(data, status, header) {console.log('addProjectMemberComplete: status:' + status + ', data:' + data);vm.reload();vm.isOpen = false;}function addProjectMemberFailed(data, status, headers) {if(status === 403) {vm.hasError = true;vm.errorMessage = 'failed_to_add_member';}if(status === 409 && pm.username !== '') {vm.hasError = true;vm.errorMessage = 'username_already_exist';}if(status === 404) {vm.hasError = true;vm.errorMessage = 'username_does_not_exist';}console.log('addProjectMemberFailed: status:' + status + ', data:' + data);}function reset() {vm.hasError = false;vm.errorMessage = '';}}function addProjectMember() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/project-member/add-project-member.directive.html','scope': {'projectId': '@','isOpen': '=','reload': '&'},'link': link,'controller': AddProjectMemberController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {scope.form.$setPristine();scope.form.$setUntouched();}}})();(function() {'use strict';angular.module('harbor.project.member').directive('switchRole', switchRole);SwitchRoleController.$inject = ['getRole', '$scope'];function SwitchRoleController(getRole, $scope) {var vm = this;$scope.$watch('vm.roleName', function(current,origin) {if(current) {vm.currentRole = getRole({'key': 'roleName', 'value': current});}});vm.selectRole = selectRole;function selectRole(role) {vm.currentRole = getRole({'key': 'roleName', 'value': role.roleName});vm.roleName = role.roleName;}}function switchRole() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/project-member/switch-role.directive.html','scope': {'roles': '=','editMode': '=','userId': '=','roleName': '='},'controller' : SwitchRoleController,'controllerAs': 'vm','bindToController': true};return directive;} })();(function() {'use strict';angular.module('harbor.project.member').directive('listProjectMember', listProjectMember);ListProjectMemberController.$inject = ['$scope', 'ListProjectMemberService', 'DeleteProjectMemberService', 'getParameterByName', '$location', 'currentUser', '$filter', 'trFilter', '$window'];function ListProjectMemberController($scope, ListProjectMemberService, DeleteProjectMemberService, getParameterByName, $location, currentUser, $filter, trFilter, $window) {$scope.subsTabPane = 30;var vm = this;vm.sectionHeight = {'min-height': '579px'};vm.isOpen = false;vm.search = search; vm.addProjectMember = addProjectMember;vm.deleteProjectMember = deleteProjectMember;vm.retrieve = retrieve;vm.username = '';vm.projectId = getParameterByName('project_id', $location.absUrl());vm.retrieve();$scope.$on('$locationChangeSuccess', function() {vm.projectId = getParameterByName('project_id', $location.absUrl());vm.username = '';vm.retrieve();});function search(e) {vm.projectId = e.projectId;vm.username = e.username;retrieve();}function addProjectMember() {if(vm.isOpen) {vm.isOpen = false;}else{vm.isOpen = true;}}function deleteProjectMember(e) {DeleteProjectMemberService(e.projectId, e.userId).success(deleteProjectMemberSuccess).error(deleteProjectMemberFailed);}function deleteProjectMemberSuccess(data, status) {console.log('Successful delete project member.');vm.retrieve();}function deleteProjectMemberFailed(e) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_delete_member'));$scope.$emit('raiseError', true);console.log('Failed to edit project member:' + e);}function retrieve() {ListProjectMemberService(vm.projectId, {'username': vm.username}).then(getProjectMemberComplete).catch(getProjectMemberFailed); }function getProjectMemberComplete(response) {vm.user = currentUser.get();vm.projectMembers = response.data || [];}  function getProjectMemberFailed(response) {console.log('Failed to get project members:' + response);vm.projectMembers = [];vm.target = 'repositories';$location.url('repositories').search('project_id', vm.projectId);}}function listProjectMember() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/project-member/list-project-member.directive.html','scope': {'sectionHeight': '=','target': '='},'link': link,'controller': ListProjectMemberController,'controllerAs': 'vm','bindToController': true}; return directive;function link(scope, element, attrs, ctrl) {element.find('#txtSearchInput').on('keydown', function(e) {if($(this).is(':focus') && e.keyCode === 13) {ctrl.retrieve();}});}}})();(function() {'use strict';angular.module('harbor.project.member').directive('editProjectMember', editProjectMember);EditProjectMemberController.$inject = ['$scope', 'roles', 'getRole','EditProjectMemberService', '$filter', 'trFilter'];function EditProjectMemberController($scope, roles, getRole, EditProjectMemberService, $filter, trFilter) {var vm = this;vm.roles = roles();vm.editMode = false;vm.lastRoleName = vm.roleName;$scope.$watch('vm.roleName', function(current, origin) {if(current) {vm.currentRole = getRole({'key': 'roleName', 'value': current});vm.roleId = vm.currentRole.id;}});vm.updateProjectMember = updateProjectMember;vm.deleteProjectMember = deleteProjectMember;vm.cancelUpdate = cancelUpdate;function updateProjectMember(e) {if(vm.editMode) {console.log('update project member, roleId:' + e.roleId); EditProjectMemberService(e.projectId, e.userId, e.roleId).success(editProjectMemberComplete).error(editProjectMemberFailed);}else {vm.editMode = true;} }function deleteProjectMember() {vm.delete();}function editProjectMemberComplete(data, status, headers) {console.log('edit project member complete: ' + status);vm.lastRoleName = vm.roleName;vm.editMode = false;vm.reload();}function editProjectMemberFailed(e) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_change_member'));$scope.$emit('raiseError', true);console.log('Failed to edit project member:' + e);}function cancelUpdate() {vm.editMode = false;vm.roleName = vm.lastRoleName;}}function editProjectMember() {var directive = {'restrict': 'A','templateUrl': '/static/resources/js/components/project-member/edit-project-member.directive.html','scope': {'username': '=','userId': '=','currentUserId': '=','roleName': '=','projectId': '=','delete': '&','reload': '&'},'controller': EditProjectMemberController,'controllerAs': 'vm','bindToController': true};return directive;}})();(function() {'use strict';angular.module('harbor.user', [ 'harbor.services.user']);})();(function() {'use strict';angular.module('harbor.user').directive('listUser', listUser);ListUserController.$inject = ['$scope', 'ListUserService', 'DeleteUserService', '$filter', 'trFilter'];function ListUserController($scope, ListUserService, DeleteUserService, $filter, $trFilter) {$scope.subsSubPane = 226;var vm = this;vm.username = '';vm.searchUser = searchUser;vm.deleteUser = deleteUser;vm.confirmToDelete = confirmToDelete;vm.retrieve = retrieve;vm.retrieve();function searchUser() {vm.retrieve();}function deleteUser() {DeleteUserService(vm.selectedUserId).success(deleteUserSuccess).error(deleteUserFailed);}function confirmToDelete(userId, username) {vm.selectedUserId = userId; $scope.$emit('modalTitle', $filter('tr')('confirm_delete_user_title'));$scope.$emit('modalMessage', $filter('tr')('confirm_delete_user', [username]));var emitInfo = {'confirmOnly': false,'contentType': 'text/plain','action': vm.deleteUser};$scope.$emit('raiseInfo', emitInfo);}function retrieve() {ListUserService(vm.username).success(listUserSuccess).error(listUserFailed);}function deleteUserSuccess(data, status) {console.log('Successful delete user.');vm.retrieve();}function deleteUserFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_delete_user'));$scope.$emit('raiseError', true);console.log('Failed to delete user.');}function listUserSuccess(data, status) {vm.users = data;}function listUserFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_list_user'));$scope.$emit('raiseError', true);console.log('Failed to list user:' + data);}}function listUser() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/user/list-user.directive.html','link': link,'controller': ListUserController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {element.find('#txtSearchInput').on('keydown', function(e) {if($(this).is(':focus') && e.keyCode === 13) {ctrl.retrieve();}});}}})();(function() {'use strict';angular.module('harbor.user').directive('toggleAdmin', toggleAdmin); ToggleAdminController.$inject = ['$scope', 'ToggleAdminService', '$filter', 'trFilter'];function ToggleAdminController($scope, ToggleAdminService, $filter, trFilter) {var vm = this;vm.isAdmin = (vm.hasAdminRole === 1) ? true : false;vm.enabled = vm.isAdmin ? 0 : 1;vm.toggle = toggle;function toggle() {ToggleAdminService(vm.userId, vm.enabled).success(toggleAdminSuccess).error(toggleAdminFailed);}function toggleAdminSuccess(data, status) {if(vm.isAdmin) {vm.isAdmin = false;}else{vm.isAdmin = true;}console.log('Toggled userId:' + vm.userId + ' to admin:' + vm.isAdmin);}function toggleAdminFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_toggle_admin'));$scope.$emit('raiseError', true);if(vm.isAdmin) {vm.isAdmin = false;}else{vm.isAdmin = true;}console.log('Failed to toggle admin:' + data);}}function toggleAdmin() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/user/toggle-admin.directive.html','scope': {'hasAdminRole': '=','userId': '@'},'link': link,'controller': ToggleAdminController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {}}})();(function() {'use strict'; angular.module('harbor.log', ['harbor.services.log']);})();(function() {'use strict';angular.module('harbor.log');  })();(function() {'use strict';angular.module('harbor.log').directive('listLog', listLog);ListLogController.$inject= ['$scope','ListLogService', 'getParameterByName', '$location', '$filter', 'trFilter'];function ListLogController($scope, ListLogService, getParameterByName, $location, $filter, trFilter) {$scope.subsTabPane = 30;var vm = this;vm.sectionHeight = {'min-height': '579px'};vm.isOpen = false; vm.beginTimestamp = 0;vm.endTimestamp = 0;vm.keywords = '';vm.username = '';vm.op = [];vm.opOthers = true;vm.search = search;vm.showAdvancedSearch = showAdvancedSearch;vm.projectId = getParameterByName('project_id', $location.absUrl());vm.queryParams = {'beginTimestamp' : vm.beginTimestamp,'endTimestamp' : vm.endTimestamp,'keywords' : vm.keywords,'projectId': vm.projectId,'username' : vm.username};retrieve(vm.queryParams);$scope.$on('$locationChangeSuccess', function() {if(vm.publicity) {vm.target = 'repositories';}vm.projectId = getParameterByName('project_id', $location.absUrl());vm.queryParams = {'beginTimestamp' : vm.beginTimestamp,'endTimestamp' : vm.endTimestamp,'keywords' : vm.keywords,'projectId': vm.projectId,'username' : vm.username};vm.username = '';retrieve(vm.queryParams);});function search(e) {if(e.op[0] === 'all') {e.op = ['create', 'pull', 'push', 'delete'];}if(vm.opOthers && $.trim(vm.others) !== '') {e.op.push(vm.others);} vm.queryParams.keywords = e.op.join('/');vm.queryParams.username = e.username;vm.queryParams.beginTimestamp = toUTCSeconds(vm.fromDate, 0, 0, 0);vm.queryParams.endTimestamp = toUTCSeconds(vm.toDate, 23, 59, 59); retrieve(vm.queryParams);}function showAdvancedSearch() {if(vm.isOpen){vm.isOpen = false;}else{vm.isOpen = true;}}function retrieve(queryParams) {ListLogService(queryParams).then(listLogComplete).catch(listLogFailed);}function listLogComplete(response) {vm.logs = response.data;vm.queryParams = {'beginTimestamp' : 0,'endTimestamp' : 0,'keywords' : '','projectId': vm.projectId,'username' : ''};vm.op = ['all'];vm.fromDate = '';vm.toDate = '';vm.others = '';vm.opOthers = true;vm.isOpen = false;}function listLogFailed(response){$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_get_log') + response);$scope.$emit('raiseError', true);console.log('Failed to get log:' + response);}function toUTCSeconds(date, hour, min, sec) {if(!angular.isDefined(date) || date === '') {return 0;}			var t = new Date(date);			t.setHours(hour);			t.setMinutes(min);			t.setSeconds(sec);						return t.getTime() / 1000;		}}function listLog() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/log/list-log.directive.html','scope': {'sectionHeight': '=','target': '=','publicity': '='},'link': link,'controller': ListLogController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {element.find('#txtSearchInput').on('keydown', function(e) {if($(this).is(':focus') && e.keyCode === 13) {ctrl.search({'op': ctrl.op, 'username': ctrl.username});}});}}})();(function() {'use strict';angular.module('harbor.log').directive('advancedSearch', advancedSearch);AdvancedSearchController.$inject = ['$scope', 'ListLogService'];function AdvancedSearchController($scope, ListLogService) {var vm = this; vm.checkOperation = checkOperation;vm.close = close;vm.opAll = true;vm.doSearch = doSearch;$scope.$watch('vm.op', function(current) {if(current && vm.op[0] === 'all') {vm.opCreate = true;vm.opPull = true;vm.opPush = true;vm.opDelete = true;vm.opOthers = true;}}, true);$scope.$watch('vm.fromDate', function(current) {if(current) {vm.fromDate = current;}});$scope.$watch('vm.toDate', function(current) {if(current) {vm.toDate = current;}}); vm.opCreate = true;vm.opPull = true;vm.opPush = true;vm.opDelete = true;vm.opOthers = true;vm.others = ''; vm.op = [];vm.op.push('all');function checkOperation(e) {if(e.checked === 'all') {vm.opCreate = vm.opAll;vm.opPull = vm.opAll;vm.opPush = vm.opAll;vm.opDelete = vm.opAll;vm.opOthers = vm.opAll;}else {vm.opAll = false;}vm.op = [];if(vm.opCreate) {vm.op.push('create');}if(vm.opPull) {vm.op.push('pull');} if(vm.opPush) {vm.op.push('push');}if(vm.opDelete) {vm.op.push('delete');}if(vm.opOthers && $.trim(vm.others) !== '') {vm.op.push($.trim(vm.others));}} vm.pickUp = pickUp;function pickUp(e) {switch(e.key){case 'fromDate':vm.fromDate = e.value;break;case 'toDate':vm.toDate = e.value;break;}$scope.$apply();}function close() {vm.op = [];vm.op.push('all');vm.fromDate = '';vm.toDate = '';vm.others = '';vm.isOpen = false;}function doSearch (e){if(vm.opOthers && $.trim(vm.others) !== '') {e.op.push(vm.others);}vm.search(e);}}function advancedSearch(I18nService) {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/log/advanced-search.directive.html','scope': {'isOpen': '=','op': '=','opOthers': '=','others': '=','fromDate': '=','toDate': '=','search': '&'},'link': link,'controller': AdvancedSearchController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {element.find('.datetimepicker').datetimepicker({				locale: I18nService().getCurrentLanguage(),				ignoreReadonly: true,				format: 'L',				showClear: true		});element.find('#fromDatePicker').on('blur', function(){ctrl.pickUp({'key': 'fromDate', 'value': $(this).val()});});element.find('#toDatePicker').on('blur', function(){ctrl.pickUp({'key': 'toDate', 'value': $(this).val()});});}}})();(function() {'use strict';angular.module('harbor.replication', ['harbor.services.replication.policy','harbor.services.replication.job']);})();(function() {'use strict';angular.module('harbor.replication').directive('listReplication', listReplication).factory('jobStatus', jobStatus);jobStatus.inject = ['$filter', 'trFilter'];function jobStatus($filter, trFilter) {return function() {return [{'key': 'all', 'value': $filter('tr')('all')},{'key': 'pending', 'value': $filter('tr')('pending')},{'key': 'running', 'value': $filter('tr')('running')},{'key': 'error', 'value': $filter('tr')('error')},{'key': 'retrying', 'value': $filter('tr')('retrying')},{'key': 'stopped', 'value': $filter('tr')('stopped')}, {'key': 'finished', 'value':$filter('tr')('finished')},{'key': 'canceled', 'value': $filter('tr')('canceled')}];};}ListReplicationController.$inject = ['$scope', 'getParameterByName', '$location', 'ListReplicationPolicyService', 'ToggleReplicationPolicyService', 'ListReplicationJobService', '$window', '$filter', 'trFilter', 'jobStatus'];function ListReplicationController($scope, getParameterByName, $location, ListReplicationPolicyService, ToggleReplicationPolicyService, ListReplicationJobService, $window, $filter, trFilter, jobStatus) {var vm = this;vm.sectionHeight = {'min-height': '1200px'};$scope.$on('$locationChangeSuccess', function() {vm.projectId = getParameterByName('project_id', $location.absUrl());vm.retrievePolicy();});vm.addReplication = addReplication;vm.editReplication = editReplication;vm.searchReplicationPolicy = searchReplicationPolicy;vm.searchReplicationJob = searchReplicationJob;vm.refreshReplicationJob = refreshReplicationJob;vm.retrievePolicy = retrievePolicy;vm.retrieveJob = retrieveJob;vm.confirmToTogglePolicy = confirmToTogglePolicy;vm.togglePolicy = togglePolicy;vm.downloadLog = downloadLog;vm.last = false;vm.projectId = getParameterByName('project_id', $location.absUrl());vm.retrievePolicy(); vm.jobStatus = jobStatus;vm.currentStatus = vm.jobStatus()[0]; vm.pickUp = pickUp;vm.searchJobTIP = false;vm.refreshJobTIP = false;function searchReplicationPolicy() {vm.retrievePolicy();} function searchReplicationJob() {if(vm.lastPolicyId !== -1) {vm.searchJobTIP = true;vm.retrieveJob(vm.lastPolicyId);}}function refreshReplicationJob() {if(vm.lastPolicyId !== -1) {vm.refreshJobTIP = true;vm.retrieveJob(vm.lastPolicyId);}} function retrievePolicy() {ListReplicationPolicyService('', vm.projectId, vm.replicationPolicyName).success(listReplicationPolicySuccess).error(listReplicationPolicyFailed);}function retrieveJob(policyId) {var status = (vm.currentStatus.key === 'all' ? '' : vm.currentStatus.key);ListReplicationJobService(policyId, vm.replicationJobName, status, toUTCSeconds(vm.fromDate, 0, 0, 0), toUTCSeconds(vm.toDate, 23, 59, 59)).success(listReplicationJobSuccess).error(listReplicationJobFailed);}function listReplicationPolicySuccess(data, status) {vm.replicationJobs = [];vm.replicationPolicies = data || [];}function listReplicationPolicyFailed(data, status) {console.log('Failed to list replication policy:' + data);}function listReplicationJobSuccess(data, status) {vm.replicationJobs = data || [];var alertInfo = {'show': false,'message': ''};angular.forEach(vm.replicationJobs, function(item) {for(var key in item) {var value = item[key];if(key === 'status' && (value === 'error' || value === 'retrying')) {alertInfo.show = true;alertInfo.message = $filter('tr')('alert_job_contains_error');}switch(key) {case 'operation':case 'status':item[key] = $filter('tr')(value);break;default:break;}}}); $scope.$emit('raiseAlert', alertInfo);vm.searchJobTIP = false;vm.refreshJobTIP = false;}function listReplicationJobFailed(data, status) {console.log('Failed to list replication job:' + data);vm.searchJobTIP = false;vm.refreshJobTIP = false;}function addReplication() {vm.modalTitle = $filter('tr')('add_new_policy', []);vm.action = 'ADD_NEW';}function editReplication(policyId) {vm.policyId = policyId;vm.modalTitle = $filter('tr')('edit_policy', []);vm.action = 'EDIT';console.log('Selected policy ID:' + vm.policyId);}function confirmToTogglePolicy(policyId, enabled, name) {vm.policyId = policyId;vm.enabled = enabled;var status = $filter('tr')(vm.enabled === 1 ? 'enable':'disable');var title;var message;if(enabled === 1){title = $filter('tr')('confirm_to_toggle_enabled_policy_title');message = $filter('tr')('confirm_to_toggle_enabled_policy');}else{title = $filter('tr')('confirm_to_toggle_disabled_policy_title');message = $filter('tr')('confirm_to_toggle_disabled_policy');}$scope.$emit('modalTitle', title);$scope.$emit('modalMessage', message);var emitInfo = {'contentType': 'text/html','confirmOnly': false,'action': vm.togglePolicy};$scope.$emit('raiseInfo', emitInfo);} function togglePolicy() {ToggleReplicationPolicyService(vm.policyId, vm.enabled).success(toggleReplicationPolicySuccess).error(toggleReplicationPolicyFailed);}function toggleReplicationPolicySuccess(data, status) {console.log('Successful toggle replication policy.');vm.retrievePolicy();}function toggleReplicationPolicyFailed(data, status) {console.log('Failed to toggle replication policy.');}function downloadLog(policyId) {$window.open('/api/jobs/replication/' + policyId + '/log', '_blank');}function pickUp(e) {switch(e.key){case 'fromDate':vm.fromDate = e.value;break;case 'toDate':vm.toDate = e.value;break;}$scope.$apply();}function toUTCSeconds(date, hour, min, sec) {if(!angular.isDefined(date) || date === '') {return '';}			var t = new Date(date);			t.setHours(hour);			t.setMinutes(min);			t.setSeconds(sec);			return t.getTime() / 1000;		}}function listReplication($timeout, I18nService) {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/replication/list-replication.directive.html','scope': {'sectionHeight': '='},'link': link,'controller': ListReplicationController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {ctrl.lastPolicyId = -1;scope.$watch('vm.replicationPolicies', function(current) { $timeout(function(){if(current) {if(current.length > 0) {element.find('#upon-pane table>tbody>tr').on('click', trClickHandler);if(ctrl.lastPolicyId === -1) {element.find('#upon-pane table>tbody>tr:eq(0)').trigger('click');}else{element.find('#upon-pane table>tbody>tr').filter('[policy_id="' + ctrl.lastPolicyId + '"]').trigger('click');}}else{ element.find('#upon-pane table>tbody>tr').css({'background-color': '#FFFFFF'}).css({'color': '#000'});}}});}); function trClickHandler(e) {element.find('#upon-pane table>tbody>tr').css({'background-color': '#FFFFFF'}).css({'color': '#000'}).css({'cursor': 'default'});element.find('#upon-pane table>tbody>tr a').css({'color': '#337ab7'});$(this).css({'background-color': '#057ac9'}).css({'color': '#fff'});$('a', this).css({'color': '#fff'});ctrl.retrieveJob($(this).attr('policy_id'));ctrl.lastPolicyId = $(this).attr('policy_id');}element.find('.datetimepicker').datetimepicker({				locale: I18nService().getCurrentLanguage(),				ignoreReadonly: true,				format: 'L',				showClear: true		});element.find('#fromDatePicker').on('blur', function(){ctrl.pickUp({'key': 'fromDate', 'value': $(this).val()});});element.find('#toDatePicker').on('blur', function(){ctrl.pickUp({'key': 'toDate', 'value': $(this).val()});});element.find('#txtSearchPolicyInput').on('keydown', function(e) {if($(this).is(':focus') && e.keyCode === 13) {ctrl.searchReplicationPolicy();}});element.find('#txtSearchJobInput').on('keydown', function(e) {if($(this).is(':focus') && e.keyCode === 13) {ctrl.searchReplicationJob();}});}}})();(function() {'use strict';angular.module('harbor.replication').directive('createPolicy', createPolicy);CreatePolicyController.$inject = ['$scope', 'ListReplicationPolicyService', 'ListDestinationService', 'CreateDestinationService', 'UpdateDestinationService', 'PingDestinationService', 'CreateReplicationPolicyService', 'UpdateReplicationPolicyService', 'ListDestinationPolicyService','$location', 'getParameterByName', '$filter', 'trFilter', '$q', '$timeout'];function CreatePolicyController($scope, ListReplicationPolicyService, ListDestinationService, CreateDestinationService, UpdateDestinationService, PingDestinationService, CreateReplicationPolicyService, UpdateReplicationPolicyService, ListDestinationPolicyService, $location, getParameterByName, $filter, trFilter, $q, $timeout) {var vm = this;$scope.replication = {};$scope.replication.policy = {};$scope.replication.destination = {};var vm0 = $scope.replication.policy;var vm1 = $scope.replication.destination;vm.selectDestination = selectDestination;vm.projectId = getParameterByName('project_id', $location.absUrl());$scope.$on('$locationChangeSuccess', function() {vm.projectId = getParameterByName('project_id', $location.absUrl());});vm.addNew = addNew;vm.edit = edit;vm.prepareDestination = prepareDestination;vm.create = create;vm.update = update;vm.pingDestination = pingDestination;vm.checkDestinationPolicyStatus = checkDestinationPolicyStatus;vm.targetEditable = true;vm.checkedAddTarget = false;vm.notAvailable = false;vm.pingAvailable = true;vm.pingMessage = '';vm.pingTIP = false;vm.saveTIP = false;vm.closeError = closeError;vm.toggleErrorMessage = false;vm.errorMessages = [];$scope.$watch('vm.destinations', function(current) {if(current) {if(!angular.isArray(current) || current.length === 0) {vm.notAvailable = true;return;}if(!angular.isDefined(vm1.selection)) {vm1.selection = current[0];vm1.endpoint = current[0].endpoint;vm1.username = current[0].username;vm1.password = current[0].password;}}});$scope.$watch('vm.checkedAddTarget', function(current) {if(current) {vm.targetEditable = true;vm1.name = '';vm1.endpoint = '';vm1.username = '';vm1.password = '';vm.pingMessage = '';}});$scope.$watch('vm.targetId', function(current) {if(current) {vm1.selection.id = current;}});$scope.$watch('replication.destination.endpoint', function(current) {if(current) {vm.notAvailable = false;}else{vm.notAvailable = true; }}); function selectDestination(item) {vm1.selection = item;if(angular.isDefined(item)) {vm.targetId = item.id;vm1.endpoint = item.endpoint;vm1.username = item.username;vm1.password = item.password;}}function prepareDestination() {ListDestinationService('').success(listDestinationSuccess).error(listDestinationFailed);}function addNew() { vm.modalTitle = $filter('tr')('add_new_policy', []); vm0.name = '';vm0.description = '';vm0.enabled = true;}function edit(policyId) {console.log('Edit policy ID:' + policyId);vm.policyId = policyId;vm.modalTitle = $filter('tr')('edit_policy', []);ListReplicationPolicyService(policyId).success(listReplicationPolicySuccess).error(listReplicationPolicyFailed);}function create(policy) {vm.policy = policy;saveDestination();}function saveDestination() {var target = {'name': vm1.name,'endpoint': vm1.endpoint,'username': vm1.username,'password': vm1.password}; if(vm.checkedAddTarget){CreateDestinationService(target.name, target.endpoint, target.username, target.password).success(createDestinationSuccess).error(createDestinationFailed);}else{vm.policy.targetId = vm1.selection.id || vm.destinations[0].id;saveOrUpdatePolicy();}}function saveOrUpdatePolicy() {vm.saveTIP = true;switch(vm.action) {case 'ADD_NEW':CreateReplicationPolicyService(vm.policy).success(createReplicationPolicySuccess).error(createReplicationPolicyFailed);break;case 'EDIT':UpdateReplicationPolicyService(vm.policyId, vm.policy).success(updateReplicationPolicySuccess).error(updateReplicationPolicyFailed);break;default:vm.saveTIP = false;}}function update(policy) {vm.policy = policy;if(vm.targetEditable) {vm.policy.targetId = vm1.selection.id;saveDestination();}}function pingDestination() {var target = {'endpoint': vm1.endpoint,'username': vm1.username,'password': vm1.password};if(vm.checkedAddTarget) {target.name = vm1.name;}vm.pingAvailable = false;vm.pingMessage = $filter('tr')('pinging_target');vm.pingTIP = true;PingDestinationService(target).success(pingDestinationSuccess).error(pingDestinationFailed);}function checkDestinationPolicyStatus() {console.log('Checking destination policy status, target_ID:' + vm.targetId);ListDestinationPolicyService(vm.targetId).success(listDestinationPolicySuccess).error(listDestinationPolicyFailed);}function closeError() {vm.errorMessages = [];vm.toggleErrorMessage = false;}function listDestinationSuccess(data, status) {vm.destinations = data || []; }function listDestinationFailed(data, status) {vm.errorMessages.push($filter('tr')('failed_to_get_destination'));console.log('Failed to get destination:' + data);}function listDestinationPolicySuccess(data, status) {if(vm.action === 'EDIT') {console.log('Current target editable:' + vm.targetEditable + ', policy ID:' + vm.policyId);vm.targetEditable = true;for(var i in data) {if(data[i].enabled === 1) {vm.targetEditable = false;break;}}}}function listDestinationPolicyFailed(data, status) {vm.errorMessages.push($filter('tr')('failed_to_get_destination_policies'));console.log('Failed to list destination policy:' + data);}function listReplicationPolicySuccess(data, status) {var replicationPolicy = data;vm.targetId = replicationPolicy.target_id;vm0.name = replicationPolicy.name;vm0.description = replicationPolicy.description;vm0.enabled = (replicationPolicy.enabled === 1);angular.forEach(vm.destinations, function(item) {if(item.id === vm.targetId) {vm1.endpoint = item.endpoint;vm1.username = item.username;vm1.password = item.password;}});vm.checkDestinationPolicyStatus();}function listReplicationPolicyFailed(data, status) {vm.errorMessages.push($filter('tr')('failed_to_get_replication_policy') + data);console.log('Failed to list replication policy:' + data);}function createReplicationPolicySuccess(data, status) {vm.saveTIP = false;console.log('Successful create replication policy.');vm.reload();vm.closeDialog();}function createReplicationPolicyFailed(data, status) {vm.saveTIP = false;if(status === 409) {vm.errorMessages.push($filter('tr')('policy_already_exists'));}else{vm.errorMessages.push($filter('tr')('failed_to_create_replication_policy') + data);} console.log('Failed to create replication policy.');}function updateReplicationPolicySuccess(data, status) {console.log('Successful update replication policy.');vm.reload();vm.saveTIP = false;vm.closeDialog();}function updateReplicationPolicyFailed(data, status) {vm.saveTIP = false;vm.errorMessages.push($filter('tr')('failed_to_update_replication_policy') + data);console.log('Failed to update replication policy.');}function createDestinationSuccess(data, status, headers) {var content = headers('Location');vm.policy.targetId = Number(content.substr(content.lastIndexOf('/') + 1));console.log('Successful create destination, targetId:' + vm.policy.targetId);saveOrUpdatePolicy();}function createDestinationFailed(data, status) {vm.errorMessages.push($filter('tr')('failed_to_create_destination') + data);console.log('Failed to create destination.');}function updateDestinationSuccess(data, status) {console.log('Successful update destination.');vm.policy.targetId = vm1.selection.id;saveOrUpdatePolicy();}function updateDestinationFailed(data, status) {vm.errorMessages.push($filter('tr')('failed_to_update_destination') + data);$scope.$broadcast('showDialog', true);console.log('Failed to update destination.');}function pingDestinationSuccess(data, status) {vm.pingAvailable = true;vm.pingMessage = $filter('tr')('successful_ping_target', []);vm.pingTIP = false;}function pingDestinationFailed(data, status) {vm.pingAvailable = true;vm.pingMessage = $filter('tr')('failed_to_ping_target', []) + (data && data.length > 0 ? ':' + data : '');vm.pingTIP = false;}}function createPolicy($timeout) {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/replication/create-policy.directive.html','scope': {'policyId': '@','modalTitle': '@','reload': '&','action': '='},'link': link,'controller': CreatePolicyController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attr, ctrl) {element.find('#createPolicyModal').on('show.bs.modal', function() {scope.$apply(function() {scope.form.$setPristine();scope.form.$setUntouched();scope.$watch('vm.checkedAddTarget', function(current, origin) {if(origin) {var d = scope.replication.destination;if(angular.isDefined(d) && angular.isDefined(d.selection)) {ctrl.targetId = d.selection.id;d.endpoint = d.selection.endpoint;d.username = d.selection.username;d.password = d.selection.password;ctrl.checkDestinationPolicyStatus();}}}); scope.$watch('vm.errorMessages', function(current) {if(current && current.length > 0) {ctrl.toggleErrorMessage = true;}}, true);ctrl.checkedAddTarget = false;ctrl.targetEditable = true;ctrl.notAvailable = false;ctrl.pingMessage = '';ctrl.pingAvailable = true;ctrl.saveTIP = false;ctrl.pingTIP = false;ctrl.toggleErrorMessage = false;ctrl.errorMessages = [];ctrl.prepareDestination();switch(ctrl.action) {case 'ADD_NEW':ctrl.addNew(); break;case 'EDIT':ctrl.edit(ctrl.policyId); break;} });}); ctrl.save = save;ctrl.closeDialog = closeDialog;function save(form) {ctrl.toggleErrorMessage = false;ctrl.errorMessages = [];var postPayload = {'projectId': Number(ctrl.projectId),'name': form.policy.name,'enabled': form.policy.enabled ? 1 : 0,'description': form.policy.description,'cron_str': '','start_time': ''};switch(ctrl.action) {case 'ADD_NEW':ctrl.create(postPayload);break;case 'EDIT':ctrl.update(postPayload);break;}}function closeDialog() {element.find('#createPolicyModal').modal('hide');}}}})();(function() {'use strict';angular.module('harbor.system.management', []);})();(function() {'use strict';angular.module('harbor.system.management').directive('systemManagement', systemManagement);SystemManagementController.$inject = ['$scope', '$location'];function SystemManagementController($scope, $location) {var vm = this;var currentTarget = $location.path().substring(1); switch(currentTarget) {case 'destinations':case 'replication':$location.path('/' + currentTarget);vm.target = currentTarget;break;default:$location.path('/destinations');vm.target = 'destinations';}}function systemManagement() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/system-management/system-management.directive.html','scope': true,'controller': SystemManagementController,'controllerAs': 'vm','bindToController': true};return directive;}})();(function() { 'use strict';angular.module('harbor.system.management').directive('destination', destination);DestinationController.$inject = ['$scope', 'ListDestinationService', 'DeleteDestinationService', '$filter', 'trFilter'];function DestinationController($scope, ListDestinationService, DeleteDestinationService, $filter, trFilter) {$scope.subsSubPane = 276;$scope.subsTblBody = 40;var vm = this;vm.retrieve = retrieve;vm.search = search;vm.addDestination = addDestination;vm.editDestination = editDestination;vm.confirmToDelete = confirmToDelete;vm.deleteDestination = deleteDestination;vm.retrieve();function retrieve() {ListDestinationService('', vm.destinationName).success(listDestinationSuccess).error(listDestinationFailed);}function search() {vm.retrieve();}function addDestination() {vm.action = 'ADD_NEW';console.log('Action for destination:' + vm.action);}function editDestination(targetId) {vm.action = 'EDIT';vm.targetId = targetId;console.log('Action for destination:' + vm.action + ', target ID:' + vm.targetId);}function confirmToDelete(targetId, name) {vm.selectedTargetId = targetId;$scope.$emit('modalTitle', $filter('tr')('confirm_delete_destination_title'));$scope.$emit('modalMessage', $filter('tr')('confirm_delete_destination', [name]));var emitInfo = {'confirmOnly': false,'contentType': 'text/plain','action': vm.deleteDestination};$scope.$emit('raiseInfo', emitInfo);}function deleteDestination() {DeleteDestinationService(vm.selectedTargetId).success(deleteDestinationSuccess).error(deleteDestinationFailed);}function listDestinationSuccess(data, status) {vm.destinations = data || [];}function listDestinationFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_list_destination'));$scope.$emit('raiseError', true);console.log('Failed to list destination:' + data);}function deleteDestinationSuccess(data, status) {console.log('Successful delete destination.');vm.retrieve();}function deleteDestinationFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_delete_destination') + data);$scope.$emit('raiseError', true);console.log('Failed to delete destination.');} }function destination() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/system-management/destination.directive.html','scope': true,'link': link,'controller': DestinationController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {element.find('#txtSearchInput').on('keydown', function(e) {if($(this).is(':focus') && e.keyCode === 13) {ctrl.retrieve();}});}}})();(function() {'use strict';angular.module('harbor.system.management').directive('createDestination', createDestination);CreateDestinationController.$inject = ['$scope', 'ListDestinationService', 'CreateDestinationService', 'UpdateDestinationService', 'PingDestinationService', 'ListDestinationPolicyService', '$filter', 'trFilter', '$timeout'];function CreateDestinationController($scope, ListDestinationService, CreateDestinationService, UpdateDestinationService, PingDestinationService, ListDestinationPolicyService, $filter, trFilter, $timeout) {var vm = this;$scope.destination = {};var vm0 = $scope.destination;vm.addNew = addNew;vm.edit = edit;vm.create = create;vm.update = update;vm.pingDestination = pingDestination;vm.closeError = closeError;vm.toggleErrorMessage = false;vm.errorMessages = [];vm.pingTIP = false;$timeout(function(){ $scope.$watch('destination.endpoint', function(current) {if(current) {vm.notAvailable = false;}else{vm.notAvailable = true;}});});function addNew() {vm.modalTitle = $filter('tr')('add_new_destination', []);vm0.name = '';vm0.endpoint = '';vm0.username = '';vm0.password = '';}function edit(targetId) {vm.editable = true;vm.modalTitle = $filter('tr')('edit_destination', []);ListDestinationService(targetId).success(getDestinationSuccess).error(getDestinationFailed);}function create(destination) { CreateDestinationService(destination.name, destination.endpoint,  destination.username, destination.password).success(createDestinationSuccess).error(createDestinationFailed);}function createDestinationSuccess(data, status) {console.log('Successful created destination.');vm.reload();vm.closeDialog();}function createDestinationFailed(data, status) {if(status === 409) {vm.errorMessages.push($filter('tr')('destination_already_exists'));}else{vm.errorMessages.push($filter('tr')('failed_to_create_destination') + data);}console.log('Failed to create destination:' + data);}function update(destination) {UpdateDestinationService(vm.targetId, destination).success(updateDestinationSuccess).error(updateDestinationFailed);}function updateDestinationSuccess(data, status) {console.log('Successful update destination.');vm.reload();vm.closeDialog();}function updateDestinationFailed(data, status) {vm.errorMessages.push($filter('tr')('failed_to_update_destination') + data);console.log('Failed to update destination.');}function getDestinationSuccess(data, status) {var destination = data;vm0.name = destination.name;vm0.endpoint = destination.endpoint;vm0.username = destination.username;vm0.password = destination.password;ListDestinationPolicyService(destination.id).success(listDestinationPolicySuccess).error(listDestinationPolicyFailed);}function getDestinationFailed(data, status) {vm.errorMessages.push($filter('tr')('failed_get_destination'));console.log('Failed to get destination.');}function listDestinationPolicySuccess(data, status) {for(var i in data) {if(data[i].enabled === 1) {vm.editable = false;break;}}}function listDestinationPolicyFailed(data, status) {vm.errorMessages.push($filter('tr')('failed_get_destination_policies'));console.log('Failed to list destination policy:' + data);}function pingDestination() {vm.pingTIP = true;var target = {'name': vm0.name,'endpoint': vm0.endpoint,'username': vm0.username,'password': vm0.password};PingDestinationService(target).success(pingDestinationSuccess).error(pingDestinationFailed);}function closeError() {vm.errorMessages = [];vm.toggleErrorMessage = false;}function pingDestinationSuccess(data, status) {vm.pingTIP = false;vm.pingMessage = $filter('tr')('successful_ping_target', []);}function pingDestinationFailed(data, status) {vm.pingTIP = false;vm.pingMessage = $filter('tr')('failed_to_ping_target', []) + (data && data.length > 0 ? ':' + data : '');}}function createDestination($timeout) {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/system-management/create-destination.directive.html','scope': {'action': '@','targetId': '@','reload': '&'},'link': link,'controller': CreateDestinationController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {element.find('#createDestinationModal').on('show.bs.modal', function() {scope.$apply(function(){scope.form.$setPristine();scope.form.$setUntouched();ctrl.editable = true;ctrl.notAvailble = true;ctrl.pingMessage = '';ctrl.pingTIP = false;ctrl.toggleErrorMessage = false;ctrl.errorMessages = [];switch(ctrl.action) {case 'ADD_NEW':ctrl.addNew();break;case 'EDIT':ctrl.edit(ctrl.targetId);break;}scope.$watch('vm.errorMessages', function(current) {if(current && current.length > 0) {ctrl.toggleErrorMessage = true;}}, true);});});ctrl.save = save;ctrl.closeDialog = closeDialog;function save(destination) {if(destination) {ctrl.toggleErrorMessage = false;ctrl.errorMessages = [];switch(ctrl.action) {case 'ADD_NEW':ctrl.create(destination);break;case 'EDIT':ctrl.update(destination);break;}}}function closeDialog() {element.find('#createDestinationModal').modal('hide');}}}})();(function() {'use strict';angular.module('harbor.system.management').directive('replication', replication);ReplicationController.$inject = ['$scope', 'ListReplicationPolicyService', 'ToggleReplicationPolicyService', '$filter', 'trFilter'];function ReplicationController($scope, ListReplicationPolicyService, ToggleReplicationPolicyService, $filter, trFilter) {$scope.subsSubPane = 276;var vm = this;vm.retrieve = retrieve;vm.search = search;vm.confirmToTogglePolicy = confirmToTogglePolicy;vm.togglePolicy = togglePolicy;vm.editReplication = editReplication;vm.retrieve();function search() {vm.retrieve();}function retrieve() {ListReplicationPolicyService('', '', vm.replicationName).success(listReplicationPolicySuccess).error(listReplicationPolicyFailed);}function listReplicationPolicySuccess(data, status) {vm.replications = data || [];}function listReplicationPolicyFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_list_replication'));$scope.$emit('raiseError', true);console.log('Failed to list replication policy.');}function confirmToTogglePolicy(policyId, enabled, name) {vm.policyId = policyId;vm.enabled = enabled;var status = $filter('tr')(vm.enabled === 1 ? 'enable':'disable');var title;var message;if(enabled === 1){title = $filter('tr')('confirm_to_toggle_enabled_policy_title');message = $filter('tr')('confirm_to_toggle_enabled_policy');}else{title = $filter('tr')('confirm_to_toggle_disabled_policy_title');message = $filter('tr')('confirm_to_toggle_disabled_policy');}$scope.$emit('modalTitle', title);$scope.$emit('modalMessage', message);var emitInfo = {'contentType': 'text/html','confirmOnly': false,'action': vm.togglePolicy};$scope.$emit('raiseInfo', emitInfo);}function togglePolicy() {ToggleReplicationPolicyService(vm.policyId, vm.enabled).success(toggleReplicationPolicySuccess).error(toggleReplicationPolicyFailed);}function toggleReplicationPolicySuccess(data, status) {console.log('Successful toggle replication policy.');vm.retrieve();}function toggleReplicationPolicyFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_toggle_policy'));$scope.$emit('raiseError', true);console.log('Failed to toggle replication policy.');}function editReplication(policyId) {vm.action = 'EDIT';vm.policyId = policyId;}}function replication() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/system-management/replication.directive.html','scope': true,'link': link,'controller': ReplicationController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attrs, ctrl) {element.find('#txtSearchInput').on('keydown', function(e) {if($(this).is(':focus') && e.keyCode === 13) {ctrl.retrieve();}});}}})();(function() {'use strict';angular.module('harbor.system.management').directive('configuration', configuration);ConfigurationController.$inject = [];function ConfigurationController() {var vm = this;vm.registrationOptions = [{ 'name': 'on','value': true },{'name': 'off','value': false}];vm.currentRegistration = { 'name': 'on','value': true };vm.changeSettings = changeSettings;vm.selectRegistration = selectRegistration;function selectRegistration() {}function changeSettings(system) {console.log(system);}}function configuration() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/system-management/configuration.directive.html','scope': true,'controller': ConfigurationController,'controllerAs': 'vm','bindToController': true};return directive;}})();(function() {'use strict';angular.module('harbor.summary', ['harbor.services.project']);})();(function() {'use strict';angular.module('harbor.summary').directive('projectSummary', projectSummary);ProjectSummaryController.$inject = ['$scope', 'StatProjectService', '$filter', 'trFilter'];function ProjectSummaryController($scope, StatProjectService, $filter, trFilter) {var vm = this;StatProjectService().success(statProjectSuccess).error(statProjectFailed);function statProjectSuccess(data) {vm.statProjects = data;}function statProjectFailed(data) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_get_stat') + data);$scope.$emit('raiseError', true);console.log('Failed to get stat:' + data);}}function projectSummary() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/summary/summary.directive.html','controller': ProjectSummaryController,'scope' : true,'controllerAs': 'vm','bindToController': true};return directive;}})();(function() {'use strict';angular.module('harbor.user.log', ['harbor.services.log']);})();(function() {'use strict';angular.module('harbor.user.log').directive('userLog', userLog);UserLogController.$inject = ['$scope', 'ListIntegratedLogService', '$filter', 'trFilter'];function UserLogController($scope, ListIntegratedLogService, $filter, trFilter) {var vm = this;ListIntegratedLogService().success(listIntegratedLogSuccess).error(listIntegratedLogFailed);function listIntegratedLogSuccess(data) {vm.integratedLogs = data || [];}function listIntegratedLogFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_get_user_log') + data);$scope.$emit('raiseError', true);console.log('Failed to get user logs:' + data);}}function userLog() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/user-log/user-log.directive.html','controller': UserLogController,'scope' : true,'controllerAs': 'vm','bindToController': true};return directive;}})();(function() {'use strict';angular.module('harbor.top.repository', ['harbor.services.repository']);})();(function() {'use strict';angular.module('harbor.top.repository').directive('topRepository', topRepository);TopRepositoryController.$inject = ['$scope', 'ListTopRepositoryService', '$filter', 'trFilter'];function TopRepositoryController($scope, ListTopRepositoryService, $filter, trFilter) {var vm = this;ListTopRepositoryService(5).success(listTopRepositorySuccess).error(listTopRepositoryFailed);function listTopRepositorySuccess(data) {vm.top10Repositories = data || [];}function listTopRepositoryFailed(data, status) {$scope.$emit('modalTitle', $filter('tr')('error'));$scope.$emit('modalMessage', $filter('tr')('failed_to_get_top_repo'));$scope.$emit('raiseError', true);console.log('Failed to get top repo:' + data);}}function topRepository() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/top-repository/top-repository.directive.html','controller': TopRepositoryController,'scope' : {'customBodyHeight': '='},'controllerAs': 'vm','bindToController': true};return directive;}})();(function() {'use strict';angular.module('harbor.loading.progress', []);})();(function() {'use strict';angular.module('harbor.loading.progress').directive('loadingProgress', loadingProgress);function loadingProgress() {var directive = {'restrict': 'EA','scope': {'toggleInProgress': '=','hideTarget': '@'},'link': link};return directive;function link(scope, element, attrs) {var spinner = $('<span class="loading-progress">');function convertToBoolean(val) {return val === 'true' ? true : false;}var hideTarget = convertToBoolean(scope.hideTarget);console.log('loading-progress, toggleInProgress:' + scope.toggleInProgress + ', hideTarget:' + hideTarget);var pristine = element.html(); scope.$watch('toggleInProgress', function(current) {if(scope.toggleInProgress) {element.attr('disabled', 'disabled');if(hideTarget) {element.html(spinner);}else{spinner = spinner.css({'margin-left': '5px'});element.append(spinner);}}else{if(hideTarget) {element.html(pristine);}else{element.find('.loading-progress').remove();}element.removeAttr('disabled');}});}}})();(function() {'use strict';angular.module('harbor.inline.help', []);})();(function() {'use strict';angular.module('harbor.inline.help').directive('inlineHelp', inlineHelp);function InlineHelpController() {var vm = this;}function inlineHelp() {var directive = {'restrict': 'E','templateUrl': '/static/resources/js/components/inline-help/inline-help.directive.html','scope': {'helpTitle': '@','content': '@'},'link': link,'controller': InlineHelpController,'controllerAs': 'vm','bindToController': true};return directive;function link(scope, element, attr, ctrl) {element.popover({'title': ctrl.helpTitle,'content': ctrl.content,'html': true});}}})();(function() {'use strict';angular.module('harbor.dismissable.alerts', []);})();